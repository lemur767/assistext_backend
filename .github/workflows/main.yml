name: Deploy AssisText to Linode

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-flask pytest-cov
    
    - name: Set up test environment
      run: |
        echo "FLASK_ENV=testing" > .env.test
        echo "DATABASE_URL=postgresql://postgres:test_password@localhost/test_db" >> .env.test
        echo "REDIS_URL=redis://localhost:6379/0" >> .env.test
        echo "SECRET_KEY=test-secret-key" >> .env.test
        echo "JWT_SECRET_KEY=test-jwt-secret" >> .env.test
        echo "SIGNALWIRE_PROJECT=test-project" >> .env.test
        echo "SIGNALWIRE_TOKEN=test-token" >> .env.test
        echo "SIGNALWIRE_SPACE=test.signalwire.com" >> .env.test
    
    - name: Run tests
      run: |
        export FLASK_ENV=testing
        # Run tests if you have them
        python -c "from app import create_app; app = create_app('testing'); print('‚úÖ App loads successfully')"
        # python -m pytest tests/ -v --tb=short
      continue-on-error: false

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Deploy to Linode
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          echo "üöÄ Starting AssisText deployment..."
          cd ${{ secrets.PROJECT_PATH }}
          ./deploy.sh
          echo "‚úÖ AssisText deployment completed!"

    - name: Verify deployment
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          echo "üîç Verifying AssisText services..."
          sudo systemctl is-active assistext-gunicorn
          sudo systemctl is-active assistext-celery
          sudo systemctl is-active assistext-celerybeat
          curl -f https://backend.assitext.ca/health || curl -f http://localhost:5000/health
          echo "‚úÖ All services are running!"

  notify:
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify deployment success
      if: needs.deploy.result == 'success'
      run: |
        echo "üöÄ AssisText deployed successfully to https://assitext.ca!"
    
    - name: Notify deployment failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "‚ùå AssisText deployment failed!"
        echo "Check the logs for details."
