{
  "summary": {
    "files_analyzed": 71,
    "total_lines": 16217,
    "total_functions": 479,
    "total_classes": 62,
    "total_issues": 136,
    "duplicate_functions": 36,
    "files_with_unused_imports": 41
  },
  "file_analyses": [
    {
      "path": "app/__init__.py",
      "lines": 204,
      "functions": [
        {
          "name": "create_app",
          "line": 9,
          "args": 1,
          "docstring": "Application factory pattern",
          "complexity": 2
        },
        {
          "name": "setup_logging",
          "line": 52,
          "args": 1,
          "docstring": "Configure application logging",
          "complexity": 3
        },
        {
          "name": "initialize_extensions",
          "line": 61,
          "args": 1,
          "docstring": "Initialize Flask extensions",
          "complexity": 3
        },
        {
          "name": "import_models",
          "line": 90,
          "args": 0,
          "docstring": "Import all models to ensure they're registered with SQLAlchemy",
          "complexity": 2
        },
        {
          "name": "setup_jwt_handlers",
          "line": 101,
          "args": 1,
          "docstring": "Setup JWT error handlers",
          "complexity": 2
        },
        {
          "name": "setup_error_handlers",
          "line": 120,
          "args": 1,
          "docstring": "Setup application error handlers",
          "complexity": 2
        },
        {
          "name": "register_blueprints",
          "line": 135,
          "args": 1,
          "docstring": "Register application blueprints",
          "complexity": 10
        },
        {
          "name": "health_check",
          "line": 42,
          "args": 0,
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "expired_token_callback",
          "line": 105,
          "args": 2,
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "invalid_token_callback",
          "line": 109,
          "args": 1,
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "unauthorized_callback",
          "line": 113,
          "args": 1,
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "not_found",
          "line": 124,
          "args": 1,
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "internal_error",
          "line": 128,
          "args": 1,
          "docstring": null,
          "complexity": 1
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "import",
          "module": "os",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "Flask",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "jsonify",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "flask_cors",
          "name": "CORS",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "flask_jwt_extended",
          "name": "JWTManager",
          "alias": null,
          "line": 4
        },
        {
          "type": "from_import",
          "module": "app.config",
          "name": "config",
          "alias": null,
          "line": 5
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "migrate",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "jwt",
          "alias": null,
          "line": 6
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 203
        },
        {
          "type": "from_import",
          "module": "app.models",
          "name": "User",
          "alias": null,
          "line": 93
        },
        {
          "type": "from_import",
          "module": "app.models",
          "name": "Message",
          "alias": null,
          "line": 93
        },
        {
          "type": "from_import",
          "module": "app.models",
          "name": "Client",
          "alias": null,
          "line": 93
        },
        {
          "type": "from_import",
          "module": "app.models",
          "name": "Subscription",
          "alias": null,
          "line": 93
        },
        {
          "type": "from_import",
          "module": "app.models",
          "name": "SubscriptionPlan",
          "alias": null,
          "line": 93
        },
        {
          "type": "from_import",
          "module": "app.models",
          "name": "Invoice",
          "alias": null,
          "line": 93
        },
        {
          "type": "from_import",
          "module": "app.models",
          "name": "InvoiceItem",
          "alias": null,
          "line": 93
        },
        {
          "type": "from_import",
          "module": "app.models",
          "name": "PaymentMethod",
          "alias": null,
          "line": 93
        },
        {
          "type": "from_import",
          "module": "app.models",
          "name": "Payment",
          "alias": null,
          "line": 93
        }
      ],
      "complexity": 30,
      "issues": [
        "Line 16: print() statement (use logging instead)",
        "Line 49: print() statement (use logging instead)",
        "Line 57: print() statement (use logging instead)",
        "Line 59: print() statement (use logging instead)",
        "Line 63: print() statement (use logging instead)",
        "Line 69: print() statement (use logging instead)",
        "Line 72: print() statement (use logging instead)",
        "Line 76: print() statement (use logging instead)",
        "Line 80: print() statement (use logging instead)",
        "Line 84: print() statement (use logging instead)",
        "Line 87: print() statement (use logging instead)",
        "Line 97: print() statement (use logging instead)",
        "Line 99: print() statement (use logging instead)",
        "Line 116: print() statement (use logging instead)",
        "Line 118: print() statement (use logging instead)",
        "Line 131: print() statement (use logging instead)",
        "Line 133: print() statement (use logging instead)",
        "Line 137: print() statement (use logging instead)",
        "Line 157: print() statement (use logging instead)",
        "Line 173: print() statement (use logging instead)",
        "Line 177: print() statement (use logging instead)",
        "Line 180: print() statement (use logging instead)",
        "Line 185: print() statement (use logging instead)",
        "Line 188: print() statement (use logging instead)",
        "Line 192: print() statement (use logging instead)",
        "Line 195: print() statement (use logging instead)",
        "Line 197: print() statement (use logging instead)",
        "Line 200: print() statement (use logging instead)"
      ]
    },
    {
      "path": "app/config.py",
      "lines": 510,
      "functions": [
        {
          "name": "get_config",
          "line": 404,
          "args": 1,
          "docstring": "Get configuration class by name with environment detection\n\nArgs:\n    config_name: Configuration name ('development', 'testing', 'production')\n    \nReturns:\n    Configuration class\n    \nRaises:\n    ConfigurationError: If configuration is invalid",
          "complexity": 5
        },
        {
          "name": "create_config_object",
          "line": 433,
          "args": 1,
          "docstring": "Create configuration object instance\n\nArgs:\n    config_name: Configuration name\n    \nReturns:\n    Configuration object instance",
          "complexity": 1
        },
        {
          "name": "validate_environment",
          "line": 451,
          "args": 0,
          "docstring": "Validate current environment configuration\n\nReturns:\n    Dictionary of validation results",
          "complexity": 2
        },
        {
          "name": "get_config_summary",
          "line": 470,
          "args": 0,
          "docstring": "Get summary of current configuration (without sensitive data)\n\nReturns:\n    Configuration summary",
          "complexity": 1
        },
        {
          "name": "validate_signalwire_config",
          "line": 227,
          "args": 1,
          "docstring": "Validate SignalWire configuration",
          "complexity": 1
        },
        {
          "name": "validate_database_config",
          "line": 233,
          "args": 1,
          "docstring": "Validate database configuration",
          "complexity": 1
        },
        {
          "name": "validate_redis_config",
          "line": 238,
          "args": 1,
          "docstring": "Validate Redis configuration",
          "complexity": 1
        },
        {
          "name": "get_signalwire_client_config",
          "line": 243,
          "args": 1,
          "docstring": "Get SignalWire client configuration",
          "complexity": 1
        },
        {
          "name": "get_database_url",
          "line": 253,
          "args": 1,
          "docstring": "Get formatted database URL",
          "complexity": 2
        },
        {
          "name": "validate_production_config",
          "line": 364,
          "args": 1,
          "docstring": "Validate critical production configuration",
          "complexity": 9
        }
      ],
      "classes": [
        {
          "name": "ConfigurationError",
          "line": 18,
          "methods": 0,
          "docstring": "Custom exception for configuration errors"
        },
        {
          "name": "BaseConfig",
          "line": 22,
          "methods": 5,
          "docstring": "Base configuration class with actual environment variables"
        },
        {
          "name": "DevelopmentConfig",
          "line": 261,
          "methods": 0,
          "docstring": "Development environment configuration"
        },
        {
          "name": "TestingConfig",
          "line": 297,
          "methods": 0,
          "docstring": "Testing environment configuration"
        },
        {
          "name": "ProductionConfig",
          "line": 332,
          "methods": 1,
          "docstring": "Production environment configuration"
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "os",
          "alias": null,
          "line": 9
        },
        {
          "type": "import",
          "module": "secrets",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "timedelta",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Type",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "dotenv",
          "name": "load_dotenv",
          "alias": null,
          "line": 13
        }
      ],
      "complexity": 24,
      "issues": [
        "Line 31: Line too long (131 chars)",
        "Line 86: Line too long (123 chars)",
        "Line 269: Line too long (125 chars)",
        "Line 305: Line too long (126 chars)",
        "Line 427: print() statement (use logging instead)",
        "Line 313: Potential hardcoded secret",
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/celery_app.py",
      "lines": 23,
      "functions": [],
      "classes": [],
      "imports": [
        {
          "type": "import",
          "module": "os",
          "alias": null,
          "line": 6
        },
        {
          "type": "import",
          "module": "sys",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "dotenv",
          "name": "load_dotenv",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "make_celery",
          "alias": null,
          "line": 17
        }
      ],
      "complexity": 0,
      "issues": []
    },
    {
      "path": "app/cli.py",
      "lines": 139,
      "functions": [
        {
          "name": "init_signalwire",
          "line": 13,
          "args": 0,
          "docstring": "Initialize SignalWire integration",
          "complexity": 4
        },
        {
          "name": "verify_signalwire",
          "line": 36,
          "args": 0,
          "docstring": "Verify SignalWire integration",
          "complexity": 4
        },
        {
          "name": "signalwire_status",
          "line": 59,
          "args": 0,
          "docstring": "Get comprehensive SignalWire integration status",
          "complexity": 5
        },
        {
          "name": "test_signalwire",
          "line": 104,
          "args": 0,
          "docstring": "Test SignalWire integration with a test message",
          "complexity": 3
        },
        {
          "name": "init_app",
          "line": 133,
          "args": 1,
          "docstring": "Register CLI commands with Flask app",
          "complexity": 1
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "import",
          "module": "click",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "signalwire_service",
          "name": "initialize_signalwire_integration",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "signalwire_service",
          "name": "verify_signalwire_integration",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "signalwire_service",
          "name": "get_signalwire_dashboard_data",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "signalwire_service",
          "name": "get_signalwire_phone_numbers",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "signalwire_service",
          "name": "send_signalwire_sms",
          "alias": null,
          "line": 2
        }
      ],
      "complexity": 17,
      "issues": []
    },
    {
      "path": "app/tasks.py",
      "lines": 458,
      "functions": [
        {
          "name": "process_incoming_sms",
          "line": 25,
          "args": 2,
          "docstring": "Process incoming SMS message asynchronously\n\nArgs:\n    webhook_data: Parsed webhook data from SignalWire\n\nReturns:\n    Dict with processing result",
          "complexity": 6
        },
        {
          "name": "generate_ai_response",
          "line": 107,
          "args": 6,
          "docstring": "Generate AI response and send SMS\n\nArgs:\n    message_sid: Original message SID\n    user_id: User ID for context\n    message_body: Incoming message text\n    from_number: Sender's phone number\n    to_number: Recipient's phone number (profile number)\n\nReturns:\n    Dict with AI response result",
          "complexity": 4
        },
        {
          "name": "send_sms_message",
          "line": 182,
          "args": 7,
          "docstring": "Send SMS message via SignalWire\n\nArgs:\n    to_number: Recipient phone number\n    from_number: Sender phone number\n    message_body: Message content\n    original_message_sid: Original incoming message SID\n    user_id: User ID for tracking\n    is_fallback: Whether this is a fallback response\n\nReturns:\n    Dict with sending result",
          "complexity": 4
        },
        {
          "name": "update_message_status",
          "line": 253,
          "args": 4,
          "docstring": "Update message status in database\n\nArgs:\n    message_sid: Message SID to update\n    status: New status\n    error_code: Error code if applicable\n    error_message: Error message if applicable",
          "complexity": 6
        },
        {
          "name": "cleanup_old_messages",
          "line": 289,
          "args": 0,
          "docstring": "Cleanup old messages and maintain database health\nRuns periodically via Celery Beat",
          "complexity": 3
        },
        {
          "name": "health_check",
          "line": 319,
          "args": 0,
          "docstring": "Periodic health check task\nMonitors system health and logs status",
          "complexity": 5
        },
        {
          "name": "batch_send_messages",
          "line": 369,
          "args": 1,
          "docstring": "Send multiple messages in batch\n\nArgs:\n    messages: List of message dictionaries with to, from, body",
          "complexity": 3
        },
        {
          "name": "store_message_in_db",
          "line": 401,
          "args": 11,
          "docstring": "Store message in database with error handling\n\nReturns:\n    Message instance or None if failed",
          "complexity": 6
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "import",
          "module": "os",
          "alias": null,
          "line": 5
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "timedelta",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "celery",
          "name": "current_task",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "celery.exceptions",
          "name": "Retry",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "celery",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "app.models.message",
          "name": "Message",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "app.models.client",
          "name": "Client",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "app.services.ai_service",
          "name": "AIService",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "app.services.signalwire_service",
          "name": "SignalWireService",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "sqlalchemy.exc",
          "name": "SQLAlchemyError",
          "alias": null,
          "line": 17
        },
        {
          "type": "import",
          "module": "time",
          "alias": null,
          "line": 18
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "get_redis",
          "alias": null,
          "line": 348
        }
      ],
      "complexity": 37,
      "issues": [
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/extensions.py",
      "lines": 19,
      "functions": [],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "flask_sqlalchemy",
          "name": "SQLAlchemy",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "flask_migrate",
          "name": "Migrate",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "flask_jwt_extended",
          "name": "JWTManager",
          "alias": null,
          "line": 4
        },
        {
          "type": "from_import",
          "module": "flask_socketio",
          "name": "SocketIO",
          "alias": null,
          "line": 5
        },
        {
          "type": "from_import",
          "module": "celery",
          "name": "Celery",
          "alias": null,
          "line": 6
        }
      ],
      "complexity": 0,
      "issues": []
    },
    {
      "path": "app/api/webhooks.py",
      "lines": 316,
      "functions": [
        {
          "name": "format_phone_number",
          "line": 17,
          "args": 1,
          "docstring": "Format phone number to E.164 format",
          "complexity": 4
        },
        {
          "name": "handle_incoming_sms",
          "line": 31,
          "args": 0,
          "docstring": "Handle incoming SMS messages from SignalWire\n\nSignalWire sends webhook data as application/x-www-form-urlencoded",
          "complexity": 11
        },
        {
          "name": "handle_incoming_voice",
          "line": 124,
          "args": 0,
          "docstring": "Handle incoming voice calls (basic response)",
          "complexity": 3
        },
        {
          "name": "handle_message_status",
          "line": 150,
          "args": 0,
          "docstring": "Handle message delivery status updates",
          "complexity": 5
        },
        {
          "name": "generate_success_response",
          "line": 188,
          "args": 1,
          "docstring": "Generate successful TwiML response",
          "complexity": 1
        },
        {
          "name": "generate_error_response",
          "line": 196,
          "args": 1,
          "docstring": "Generate error TwiML response",
          "complexity": 1
        },
        {
          "name": "generate_trial_expired_response",
          "line": 205,
          "args": 1,
          "docstring": "Generate response for expired trial users",
          "complexity": 1
        },
        {
          "name": "generate_out_of_hours_response",
          "line": 213,
          "args": 2,
          "docstring": "Generate response for messages outside business hours",
          "complexity": 3
        },
        {
          "name": "generate_ai_error_response",
          "line": 228,
          "args": 0,
          "docstring": "Generate response when AI processing fails",
          "complexity": 1
        },
        {
          "name": "generate_voice_response",
          "line": 236,
          "args": 1,
          "docstring": "Generate TwiML response for voice calls",
          "complexity": 1
        },
        {
          "name": "generate_voice_error_response",
          "line": 245,
          "args": 0,
          "docstring": "Generate error response for voice calls",
          "complexity": 1
        },
        {
          "name": "is_within_business_hours",
          "line": 254,
          "args": 1,
          "docstring": "Check if current time is within user's business hours",
          "complexity": 6
        },
        {
          "name": "test_webhook",
          "line": 300,
          "args": 0,
          "docstring": "Test webhook endpoint for development",
          "complexity": 3
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "flask",
          "name": "Blueprint",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "request",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "jsonify",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "current_app",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 3
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 4
        },
        {
          "type": "import",
          "module": "json",
          "alias": null,
          "line": 5
        },
        {
          "type": "import",
          "module": "os",
          "alias": null,
          "line": 6
        },
        {
          "type": "import",
          "module": "re",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "app.models.user",
          "name": "User",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "app.models.message",
          "name": "Message",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 263
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "time",
          "alias": null,
          "line": 263
        },
        {
          "type": "import",
          "module": "pytz",
          "alias": null,
          "line": 264
        },
        {
          "type": "from_import",
          "module": "app.tasks.ai_tasks",
          "name": "process_incoming_message_task",
          "alias": null,
          "line": 101
        }
      ],
      "complexity": 41,
      "issues": [
        "Line 240: Line too long (198 chars)",
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/api/__init__.py",
      "lines": 75,
      "functions": [
        {
          "name": "register_blueprints",
          "line": 7,
          "args": 1,
          "docstring": "Register all blueprints with the Flask application.",
          "complexity": 9
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 3
        }
      ],
      "complexity": 9,
      "issues": [
        "Line 10: print() statement (use logging instead)",
        "Line 11: print() statement (use logging instead)",
        "Line 14: print() statement (use logging instead)",
        "Line 15: print() statement (use logging instead)",
        "Line 40: print() statement (use logging instead)",
        "Line 48: print() statement (use logging instead)",
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/api/profile.py",
      "lines": 372,
      "functions": [
        {
          "name": "get_user_profile",
          "line": 12,
          "args": 0,
          "docstring": "Get current user's profile (single profile per user)",
          "complexity": 3
        },
        {
          "name": "update_user_profile",
          "line": 33,
          "args": 0,
          "docstring": "Update current user's profile",
          "complexity": 25
        },
        {
          "name": "get_signalwire_config",
          "line": 111,
          "args": 0,
          "docstring": "Get SignalWire configuration",
          "complexity": 3
        },
        {
          "name": "update_signalwire_config",
          "line": 138,
          "args": 0,
          "docstring": "Update SignalWire configuration",
          "complexity": 10
        },
        {
          "name": "get_ai_settings",
          "line": 201,
          "args": 0,
          "docstring": "Get AI configuration",
          "complexity": 3
        },
        {
          "name": "update_ai_settings",
          "line": 223,
          "args": 0,
          "docstring": "Update AI configuration",
          "complexity": 13
        },
        {
          "name": "get_usage_stats",
          "line": 281,
          "args": 0,
          "docstring": "Get usage statistics for the user",
          "complexity": 3
        },
        {
          "name": "update_business_hours",
          "line": 330,
          "args": 0,
          "docstring": "Update business hours configuration",
          "complexity": 10
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "flask",
          "name": "Blueprint",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "request",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "jsonify",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "current_app",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "flask_jwt_extended",
          "name": "jwt_required",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "flask_jwt_extended",
          "name": "get_jwt_identity",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "app.models.user",
          "name": "User",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 4
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 5
        },
        {
          "type": "import",
          "module": "json",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "app.models.message",
          "name": "Message",
          "alias": null,
          "line": 294
        },
        {
          "type": "from_import",
          "module": "app.models.client",
          "name": "Client",
          "alias": null,
          "line": 295
        }
      ],
      "complexity": 70,
      "issues": [
        "Line 173: TODO/FIXME comment found",
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/api/billing.py",
      "lines": 387,
      "functions": [
        {
          "name": "get_models",
          "line": 12,
          "args": 0,
          "docstring": "Lazy import models to prevent circular imports",
          "complexity": 1
        },
        {
          "name": "get_current_subscription",
          "line": 38,
          "args": 0,
          "docstring": "Get current user's subscription details",
          "complexity": 3
        },
        {
          "name": "create_subscription",
          "line": 65,
          "args": 0,
          "docstring": "Create new subscription",
          "complexity": 5
        },
        {
          "name": "get_payment_methods",
          "line": 120,
          "args": 0,
          "docstring": "Get user's payment methods",
          "complexity": 2
        },
        {
          "name": "add_payment_method",
          "line": 143,
          "args": 0,
          "docstring": "Add new payment method",
          "complexity": 3
        },
        {
          "name": "delete_payment_method",
          "line": 184,
          "args": 1,
          "docstring": "Delete payment method",
          "complexity": 3
        },
        {
          "name": "get_invoices",
          "line": 214,
          "args": 0,
          "docstring": "Get user's invoices",
          "complexity": 3
        },
        {
          "name": "get_invoice",
          "line": 254,
          "args": 1,
          "docstring": "Get specific invoice",
          "complexity": 3
        },
        {
          "name": "get_billing_settings",
          "line": 282,
          "args": 0,
          "docstring": "Get user's billing settings",
          "complexity": 3
        },
        {
          "name": "update_billing_settings",
          "line": 308,
          "args": 0,
          "docstring": "Update user's billing settings",
          "complexity": 7
        },
        {
          "name": "get_usage",
          "line": 349,
          "args": 0,
          "docstring": "Get user's usage statistics",
          "complexity": 2
        },
        {
          "name": "billing_health",
          "line": 381,
          "args": 0,
          "docstring": "Billing API health check",
          "complexity": 1
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "flask",
          "name": "Blueprint",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "request",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "jsonify",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "current_app",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "flask_jwt_extended",
          "name": "jwt_required",
          "alias": null,
          "line": 4
        },
        {
          "type": "from_import",
          "module": "flask_jwt_extended",
          "name": "get_jwt_identity",
          "alias": null,
          "line": 4
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 5
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "timedelta",
          "alias": null,
          "line": 5
        },
        {
          "type": "from_import",
          "module": "sqlalchemy",
          "name": "func",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "sqlalchemy",
          "name": "or_",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "sqlalchemy",
          "name": "and_",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "app.models.user",
          "name": "User",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "app.models.subscription",
          "name": "Subscription",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "app.models.subscription",
          "name": "SubscriptionPlan",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "app.models.billing",
          "name": "PaymentMethod",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "app.models.billing",
          "name": "Payment",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "app.models.billing",
          "name": "Invoice",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "app.models.billing",
          "name": "InvoiceItem",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "app.models.credit_transaction",
          "name": "CreditTransaction",
          "alias": null,
          "line": 17
        },
        {
          "type": "from_import",
          "module": "app.models.billing_settings",
          "name": "BillingSettings",
          "alias": null,
          "line": 18
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 19
        }
      ],
      "complexity": 36,
      "issues": [
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/api/fallback_webhooks.py",
      "lines": 235,
      "functions": [
        {
          "name": "fallback_sms_handler",
          "line": 21,
          "args": 0,
          "docstring": "Fallback SMS webhook handler\nProvides basic SMS handling when main webhook fails",
          "complexity": 4
        },
        {
          "name": "fallback_voice_handler",
          "line": 77,
          "args": 0,
          "docstring": "Fallback voice webhook handler\nProvides basic voice message when main webhook fails",
          "complexity": 3
        },
        {
          "name": "fallback_status_handler",
          "line": 114,
          "args": 0,
          "docstring": "Fallback status webhook handler\nBasic status logging when main webhook fails",
          "complexity": 7
        },
        {
          "name": "fallback_health",
          "line": 159,
          "args": 0,
          "docstring": "Health check for fallback webhook service",
          "complexity": 1
        },
        {
          "name": "update_main_webhook_implementation",
          "line": 173,
          "args": 0,
          "docstring": "Utility endpoint to show how to update your main webhooks.py to use the new utilities\nThis is for reference - you would integrate this into your existing webhooks.py",
          "complexity": 1
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "flask",
          "name": "Blueprint",
          "alias": null,
          "line": 5
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "request",
          "alias": null,
          "line": 5
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "Response",
          "alias": null,
          "line": 5
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "jsonify",
          "alias": null,
          "line": 5
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "current_app",
          "alias": null,
          "line": 5
        },
        {
          "type": "from_import",
          "module": "app.services.sms_service",
          "name": "validate_signalwire_signature",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "app.services.sms_service",
          "name": "create_cxml_response",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "app.services.sms_service",
          "name": "create_voice_cxml_response",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "app.services.sms_service",
          "name": "parse_signalwire_webhook_data",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "app.services.sms_service",
          "name": "log_webhook_request",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "app.services.sms_service",
          "name": "escape_xml",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "app.models.message",
          "name": "Message",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 15
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 16
        }
      ],
      "complexity": 16,
      "issues": [
        "Line 58: Line too long (137 chars)",
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/api/signalwire_subaccounts.py",
      "lines": 132,
      "functions": [
        {
          "name": "get_subaccount_details",
          "line": 89,
          "args": 1,
          "docstring": "Get sub-account details and phone numbers",
          "complexity": 3
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "flask",
          "name": "Blueprint",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "request",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "jsonify",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "flask_jwt_extended",
          "name": "jwt_required",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "flask_jwt_extended",
          "name": "get_jwt_identity",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "app.services.signalwire_subaccount_service",
          "name": "SignalWireSubAccountService",
          "alias": null,
          "line": 3
        },
        {
          "type": "import",
          "module": "asyncio",
          "alias": null,
          "line": 4
        }
      ],
      "complexity": 3,
      "issues": [
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/api/messages.py",
      "lines": 520,
      "functions": [
        {
          "name": "get_user_messages",
          "line": 17,
          "args": 0,
          "docstring": "Get all messages for the current user",
          "complexity": 7
        },
        {
          "name": "get_conversations",
          "line": 88,
          "args": 0,
          "docstring": "Get recent conversations for the user",
          "complexity": 3
        },
        {
          "name": "get_message",
          "line": 144,
          "args": 0,
          "docstring": "Get a specific message",
          "complexity": 3
        },
        {
          "name": "mark_message_read",
          "line": 170,
          "args": 0,
          "docstring": "Mark a message as read",
          "complexity": 3
        },
        {
          "name": "mark_messages_read",
          "line": 200,
          "args": 0,
          "docstring": "Mark multiple messages as read",
          "complexity": 5
        },
        {
          "name": "flag_message",
          "line": 234,
          "args": 0,
          "docstring": "Flag a message for review",
          "complexity": 4
        },
        {
          "name": "unflag_message",
          "line": 279,
          "args": 0,
          "docstring": "Remove flag from a message",
          "complexity": 3
        },
        {
          "name": "send_message",
          "line": 313,
          "args": 0,
          "docstring": "Send a message to a client",
          "complexity": 9
        },
        {
          "name": "get_message_stats",
          "line": 399,
          "args": 0,
          "docstring": "Get message statistics for the user",
          "complexity": 2
        },
        {
          "name": "get_conversation",
          "line": 486,
          "args": 0,
          "docstring": "Get conversation with a specific phone number",
          "complexity": 5
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "flask",
          "name": "Blueprint",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "request",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "jsonify",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "current_app",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "flask_jwt_extended",
          "name": "jwt_required",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "flask_jwt_extended",
          "name": "get_jwt_identity",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "app.models.user",
          "name": "User",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "app.models.client",
          "name": "Client",
          "alias": null,
          "line": 4
        },
        {
          "type": "from_import",
          "module": "app.models.message",
          "name": "Message",
          "alias": null,
          "line": 5
        },
        {
          "type": "from_import",
          "module": "app.models.message",
          "name": "FlaggedMessage",
          "alias": null,
          "line": 5
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "timedelta",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "sqlalchemy",
          "name": "func",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "sqlalchemy",
          "name": "or_",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "sqlalchemy",
          "name": "and_",
          "alias": null,
          "line": 8
        }
      ],
      "complexity": 44,
      "issues": [
        "Line 361: TODO/FIXME comment found",
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/api/clients.py",
      "lines": 435,
      "functions": [
        {
          "name": "get_user_clients",
          "line": 17,
          "args": 0,
          "docstring": "Get all clients for the current user (no profile_id needed)",
          "complexity": 10
        },
        {
          "name": "get_client_details",
          "line": 124,
          "args": 0,
          "docstring": "Get detailed information about a specific client",
          "complexity": 3
        },
        {
          "name": "update_client",
          "line": 189,
          "args": 0,
          "docstring": "Update client information",
          "complexity": 14
        },
        {
          "name": "block_client",
          "line": 256,
          "args": 0,
          "docstring": "Block a client",
          "complexity": 4
        },
        {
          "name": "unblock_client",
          "line": 294,
          "args": 0,
          "docstring": "Unblock a client",
          "complexity": 3
        },
        {
          "name": "get_client_messages",
          "line": 329,
          "args": 0,
          "docstring": "Get message history with a specific client",
          "complexity": 5
        },
        {
          "name": "get_client_stats",
          "line": 393,
          "args": 0,
          "docstring": "Get client statistics for the user",
          "complexity": 2
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "flask",
          "name": "Blueprint",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "request",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "jsonify",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "current_app",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "flask_jwt_extended",
          "name": "jwt_required",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "flask_jwt_extended",
          "name": "get_jwt_identity",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "app.models.user",
          "name": "User",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "app.models.client",
          "name": "Client",
          "alias": null,
          "line": 4
        },
        {
          "type": "from_import",
          "module": "app.models.message",
          "name": "Message",
          "alias": null,
          "line": 5
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "timedelta",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "sqlalchemy",
          "name": "func",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "sqlalchemy",
          "name": "or_",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "sqlalchemy",
          "name": "and_",
          "alias": null,
          "line": 8
        }
      ],
      "complexity": 41,
      "issues": [
        "Line 96: Line too long (142 chars)",
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/api/health.py",
      "lines": 119,
      "functions": [
        {
          "name": "health_check",
          "line": 13,
          "args": 0,
          "docstring": "Comprehensive health check endpoint",
          "complexity": 8
        },
        {
          "name": "readiness_check",
          "line": 77,
          "args": 0,
          "docstring": "Kubernetes/Docker readiness probe",
          "complexity": 2
        },
        {
          "name": "liveness_check",
          "line": 96,
          "args": 0,
          "docstring": "Kubernetes/Docker liveness probe",
          "complexity": 1
        },
        {
          "name": "version_info",
          "line": 105,
          "args": 0,
          "docstring": "Get version and build information",
          "complexity": 1
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "flask",
          "name": "Blueprint",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "jsonify",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "app.models.user",
          "name": "User",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "app.models.profile",
          "name": "Profile",
          "alias": null,
          "line": 4
        },
        {
          "type": "from_import",
          "module": "app.models.message",
          "name": "Message",
          "alias": null,
          "line": 5
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 6
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 7
        }
      ],
      "complexity": 12,
      "issues": [
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/api/signup.py",
      "lines": 390,
      "functions": [
        {
          "name": "search_available_numbers",
          "line": 17,
          "args": 0,
          "docstring": "Search for available phone numbers\n\nRequest body:\n{\n    \"country\": \"US|CA\",\n    \"area_code\": \"416\",\n    \"city\": \"Toronto\", \n    \"region\": \"ON\",\n    \"contains\": \"555\",\n    \"limit\": 10\n}",
          "complexity": 4
        },
        {
          "name": "purchase_phone_number",
          "line": 75,
          "args": 0,
          "docstring": "Purchase phone number and automatically configure webhooks\n\nRequest body:\n{\n    \"phone_number\": \"+14165551234\",\n    \"friendly_name\": \"My Business Line\",\n    \"profile_name\": \"Business Profile\",\n    \"business_type\": \"Restaurant\",\n    \"timezone\": \"America/Toronto\"\n}",
          "complexity": 10
        },
        {
          "name": "verify_webhook_configuration",
          "line": 192,
          "args": 1,
          "docstring": "Verify webhook configuration for a profile's phone number",
          "complexity": 4
        },
        {
          "name": "update_webhook_configuration",
          "line": 221,
          "args": 1,
          "docstring": "Update webhook configuration for a profile's phone number\n\nRequest body:\n{\n    \"sms_url\": \"https://custom.webhook.url/sms\",\n    \"voice_url\": \"https://custom.webhook.url/voice\",\n    \"status_callback\": \"https://custom.webhook.url/status\"\n}",
          "complexity": 6
        },
        {
          "name": "list_user_phone_numbers",
          "line": 272,
          "args": 0,
          "docstring": "List all phone numbers owned by the current user",
          "complexity": 4
        },
        {
          "name": "release_phone_number",
          "line": 307,
          "args": 1,
          "docstring": "Release (delete) a phone number",
          "complexity": 5
        },
        {
          "name": "get_signalwire_status",
          "line": 348,
          "args": 0,
          "docstring": "Get SignalWire service status and configuration",
          "complexity": 2
        },
        {
          "name": "test_signalwire_connection",
          "line": 365,
          "args": 0,
          "docstring": "Test SignalWire API connectivity",
          "complexity": 3
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "flask",
          "name": "Blueprint",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "request",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "jsonify",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "current_app",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "flask_jwt_extended",
          "name": "jwt_required",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "flask_jwt_extended",
          "name": "get_jwt_identity",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "app.services.signalwire_service",
          "name": "SignalWireService",
          "alias": null,
          "line": 4
        },
        {
          "type": "from_import",
          "module": "app.models.user",
          "name": "User",
          "alias": null,
          "line": 5
        },
        {
          "type": "from_import",
          "module": "app.models.profile",
          "name": "Profile",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 7
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 8
        }
      ],
      "complexity": 38,
      "issues": [
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/api/auth.py",
      "lines": 452,
      "functions": [
        {
          "name": "safe_jsonify",
          "line": 30,
          "args": 2,
          "docstring": null,
          "complexity": 2
        },
        {
          "name": "register",
          "line": 47,
          "args": 0,
          "docstring": null,
          "complexity": 14
        },
        {
          "name": "login",
          "line": 158,
          "args": 0,
          "docstring": "User login with complete profile data",
          "complexity": 7
        },
        {
          "name": "get_current_user",
          "line": 220,
          "args": 0,
          "docstring": "Get current user profile (complete profile data)\nUPDATED: Returns integrated profile data instead of separate user + profile",
          "complexity": 4
        },
        {
          "name": "refresh",
          "line": 251,
          "args": 0,
          "docstring": "Refresh access token",
          "complexity": 4
        },
        {
          "name": "logout",
          "line": 278,
          "args": 0,
          "docstring": "Logout user (blacklist token)\nNote: This requires implementing a token blacklist system",
          "complexity": 2
        },
        {
          "name": "update_password",
          "line": 303,
          "args": 0,
          "docstring": "Update user password",
          "complexity": 8
        },
        {
          "name": "verify_email",
          "line": 351,
          "args": 0,
          "docstring": "Email verification endpoint\nTODO: Implement actual email verification with tokens",
          "complexity": 3
        },
        {
          "name": "deactivate_account",
          "line": 382,
          "args": 0,
          "docstring": "Deactivate user account",
          "complexity": 6
        },
        {
          "name": "list_users",
          "line": 422,
          "args": 0,
          "docstring": "List all users (admin only)",
          "complexity": 4
        },
        {
          "name": "default",
          "line": 18,
          "args": 2,
          "docstring": null,
          "complexity": 5
        }
      ],
      "classes": [
        {
          "name": "CustomJSONEncoder",
          "line": 17,
          "methods": 1,
          "docstring": null
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "flask",
          "name": "Blueprint",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "request",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "jsonify",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "current_app",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "flask_jwt_extended",
          "name": "jwt_required",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "flask_jwt_extended",
          "name": "get_jwt_identity",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "flask_jwt_extended",
          "name": "create_access_token",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "flask_jwt_extended",
          "name": "create_refresh_token",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "flask_jwt_extended",
          "name": "get_jwt",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "app.models.user",
          "name": "User",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "timedelta",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "date",
          "alias": null,
          "line": 8
        },
        {
          "type": "import",
          "module": "re",
          "alias": null,
          "line": 9
        },
        {
          "type": "import",
          "module": "json",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "decimal",
          "name": "Decimal",
          "alias": null,
          "line": 12
        },
        {
          "type": "import",
          "module": "base64",
          "alias": null,
          "line": 13
        }
      ],
      "complexity": 59,
      "issues": [
        "Line 100: Line too long (129 chars)",
        "Line 284: TODO/FIXME comment found",
        "Line 363: TODO/FIXME comment found",
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/api/signalwire.py",
      "lines": 341,
      "functions": [
        {
          "name": "search_numbers",
          "line": 16,
          "args": 0,
          "docstring": "Search for available phone numbers and create subaccount\nFrontend call: POST /api/signalwire/search-numbers",
          "complexity": 4
        },
        {
          "name": "purchase_number",
          "line": 62,
          "args": 0,
          "docstring": "Purchase selected phone number and configure webhook\nFrontend call: POST /api/signalwire/purchase-number",
          "complexity": 4
        },
        {
          "name": "get_subaccount",
          "line": 103,
          "args": 0,
          "docstring": "Get existing subaccount for authenticated user\nFrontend call: GET /api/signalwire/subaccount",
          "complexity": 2
        },
        {
          "name": "test_webhook",
          "line": 126,
          "args": 0,
          "docstring": "Test webhook configuration for user's subaccount\nFrontend call: POST /api/signalwire/test-webhook",
          "complexity": 4
        },
        {
          "name": "get_usage_stats",
          "line": 172,
          "args": 0,
          "docstring": "Get usage statistics for user's subaccount\nFrontend call: GET /api/signalwire/usage",
          "complexity": 5
        },
        {
          "name": "handle_sms_webhook",
          "line": 226,
          "args": 1,
          "docstring": null,
          "complexity": 3
        },
        {
          "name": "handle_webhook_test",
          "line": 258,
          "args": 1,
          "docstring": null,
          "complexity": 2
        },
        {
          "name": "_validate_signalwire_signature",
          "line": 281,
          "args": 1,
          "docstring": null,
          "complexity": 2
        },
        {
          "name": "bad_request",
          "line": 309,
          "args": 1,
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "unauthorized",
          "line": 316,
          "args": 1,
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "forbidden",
          "line": 323,
          "args": 1,
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "not_found",
          "line": 330,
          "args": 1,
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "internal_error",
          "line": 337,
          "args": 1,
          "docstring": null,
          "complexity": 1
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "flask",
          "name": "Blueprint",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "request",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "jsonify",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "flask_jwt_extended",
          "name": "jwt_required",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "flask_jwt_extended",
          "name": "get_jwt_identity",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "app.services.signalwire_service",
          "name": "SignalWireService",
          "alias": null,
          "line": 4
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 5
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 6
        },
        {
          "type": "import",
          "module": "hmac",
          "alias": null,
          "line": 283
        },
        {
          "type": "import",
          "module": "hashlib",
          "alias": null,
          "line": 284
        },
        {
          "type": "import",
          "module": "os",
          "alias": null,
          "line": 285
        },
        {
          "type": "from_import",
          "module": "app.tasks",
          "name": "process_incoming_sms",
          "alias": null,
          "line": 247
        }
      ],
      "complexity": 31,
      "issues": [
        "Line 203: Line too long (129 chars)",
        "Line 244: Line too long (124 chars)",
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/api/subscriptions.py",
      "lines": 91,
      "functions": [
        {
          "name": "create_subscription",
          "line": 12,
          "args": 0,
          "docstring": "Create new subscription with SignalWire provisioning",
          "complexity": 4
        },
        {
          "name": "get_current_subscription",
          "line": 43,
          "args": 0,
          "docstring": "Get current user subscription with SignalWire details",
          "complexity": 3
        },
        {
          "name": "cancel_subscription",
          "line": 74,
          "args": 0,
          "docstring": "Cancel current subscription",
          "complexity": 3
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "flask",
          "name": "Blueprint",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "request",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "jsonify",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "flask_jwt_extended",
          "name": "jwt_required",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "flask_jwt_extended",
          "name": "get_jwt_identity",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "app.services.subscription_service",
          "name": "SubscriptionService",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "app.models.billing",
          "name": "Subscription",
          "alias": null,
          "line": 4
        },
        {
          "type": "from_import",
          "module": "app.models.signalwire_account",
          "name": "SignalWireAccount",
          "alias": null,
          "line": 5
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 6
        }
      ],
      "complexity": 10,
      "issues": []
    },
    {
      "path": "app/api/signalwire_test.py",
      "lines": 123,
      "functions": [
        {
          "name": "health_check",
          "line": 98,
          "args": 0,
          "docstring": "Simple health check for SignalWire integration",
          "complexity": 3
        },
        {
          "name": "get",
          "line": 18,
          "args": 1,
          "docstring": null,
          "complexity": 3
        },
        {
          "name": "get",
          "line": 56,
          "args": 1,
          "docstring": null,
          "complexity": 3
        }
      ],
      "classes": [
        {
          "name": "SignalWireConnectionTestAPI",
          "line": 14,
          "methods": 1,
          "docstring": "Test SignalWire connection and return account status"
        },
        {
          "name": "SignalWireAccountInfoAPI",
          "line": 52,
          "methods": 1,
          "docstring": "Get detailed SignalWire account information"
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "flask",
          "name": "Blueprint",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "jsonify",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "flask_restful",
          "name": "Resource",
          "alias": null,
          "line": 4
        },
        {
          "type": "from_import",
          "module": "flask_restful",
          "name": "Api",
          "alias": null,
          "line": 4
        },
        {
          "type": "from_import",
          "module": "flask_jwt_extended",
          "name": "jwt_required",
          "alias": null,
          "line": 5
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 6
        }
      ],
      "complexity": 9,
      "issues": [
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/api/user_profile.py",
      "lines": 619,
      "functions": [
        {
          "name": "get_user_profile",
          "line": 66,
          "args": 0,
          "docstring": "Get the current user's profile information",
          "complexity": 3
        },
        {
          "name": "update_user_profile",
          "line": 86,
          "args": 0,
          "docstring": "Update the current user's profile information",
          "complexity": 7
        },
        {
          "name": "get_ai_settings",
          "line": 125,
          "args": 0,
          "docstring": "Get the current user's AI settings",
          "complexity": 3
        },
        {
          "name": "update_ai_settings",
          "line": 153,
          "args": 0,
          "docstring": "Update the current user's AI settings",
          "complexity": 7
        },
        {
          "name": "get_auto_reply_settings",
          "line": 204,
          "args": 0,
          "docstring": "Get the current user's auto reply settings",
          "complexity": 3
        },
        {
          "name": "update_auto_reply_settings",
          "line": 231,
          "args": 0,
          "docstring": "Update the current user's auto reply settings",
          "complexity": 7
        },
        {
          "name": "get_business_hours",
          "line": 271,
          "args": 0,
          "docstring": "Get the current user's business hours settings",
          "complexity": 3
        },
        {
          "name": "update_business_hours",
          "line": 298,
          "args": 0,
          "docstring": "Update the current user's business hours settings",
          "complexity": 7
        },
        {
          "name": "get_security_settings",
          "line": 338,
          "args": 0,
          "docstring": "Get the current user's security settings",
          "complexity": 3
        },
        {
          "name": "update_security_settings",
          "line": 364,
          "args": 0,
          "docstring": "Update the current user's security settings",
          "complexity": 7
        },
        {
          "name": "get_signalwire_settings",
          "line": 404,
          "args": 0,
          "docstring": "Get the current user's SignalWire settings",
          "complexity": 3
        },
        {
          "name": "update_signalwire_settings",
          "line": 429,
          "args": 0,
          "docstring": "Update the current user's SignalWire settings",
          "complexity": 8
        },
        {
          "name": "deactivate_account",
          "line": 473,
          "args": 0,
          "docstring": "Deactivate the current user's account",
          "complexity": 3
        },
        {
          "name": "change_password",
          "line": 498,
          "args": 0,
          "docstring": "Change the current user's password",
          "complexity": 7
        },
        {
          "name": "get_dashboard_summary",
          "line": 547,
          "args": 0,
          "docstring": "Get dashboard summary for the current user",
          "complexity": 3
        }
      ],
      "classes": [
        {
          "name": "ProfileUpdateSchema",
          "line": 18,
          "methods": 0,
          "docstring": null
        },
        {
          "name": "AISettingsSchema",
          "line": 25,
          "methods": 0,
          "docstring": null
        },
        {
          "name": "AutoReplySettingsSchema",
          "line": 34,
          "methods": 0,
          "docstring": null
        },
        {
          "name": "BusinessHoursSchema",
          "line": 42,
          "methods": 0,
          "docstring": null
        },
        {
          "name": "SecuritySettingsSchema",
          "line": 49,
          "methods": 0,
          "docstring": null
        },
        {
          "name": "SignalWireSettingsSchema",
          "line": 55,
          "methods": 0,
          "docstring": null
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "flask",
          "name": "Blueprint",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "request",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "jsonify",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "flask_jwt_extended",
          "name": "jwt_required",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "flask_jwt_extended",
          "name": "get_jwt_identity",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "app.models.user",
          "name": "User",
          "alias": null,
          "line": 4
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 5
        },
        {
          "type": "from_import",
          "module": "marshmallow",
          "name": "Schema",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "marshmallow",
          "name": "fields",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "marshmallow",
          "name": "validate",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "marshmallow",
          "name": "ValidationError",
          "alias": null,
          "line": 7
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "timedelta",
          "alias": null,
          "line": 552
        },
        {
          "type": "from_import",
          "module": "app.models.message",
          "name": "Message",
          "alias": null,
          "line": 553
        },
        {
          "type": "from_import",
          "module": "app.models.client",
          "name": "Client",
          "alias": null,
          "line": 554
        }
      ],
      "complexity": 74,
      "issues": [
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/tasks/billing.py",
      "lines": 84,
      "functions": [
        {
          "name": "update_all_usage_tracking",
          "line": 11,
          "args": 0,
          "docstring": "Update usage tracking for all users with Twilio accounts",
          "complexity": 7
        },
        {
          "name": "process_monthly_billing",
          "line": 41,
          "args": 0,
          "docstring": "Process monthly billing for all users with Twilio accounts",
          "complexity": 5
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "app.models.user",
          "name": "User",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "app.services.subscription_service",
          "name": "TwilioUsage",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "app.services.twilio_service",
          "name": "TwilioService",
          "alias": null,
          "line": 4
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 5
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 6
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 7
        }
      ],
      "complexity": 12,
      "issues": [
        "Line 21: Line too long (122 chars)",
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/tasks/ai_tasks.py",
      "lines": 519,
      "functions": [
        {
          "name": "process_incoming_message_task",
          "line": 37,
          "args": 5,
          "docstring": "Process incoming message with AI and send response\n\nArgs:\n    user_id: Database user ID\n    message_id: Database message ID\n    from_number: Client phone number\n    message_body: Message content",
          "complexity": 12
        },
        {
          "name": "send_sms_response",
          "line": 175,
          "args": 5,
          "docstring": "Send SMS response via SignalWire\n\nArgs:\n    user_id: Database user ID\n    message_id: Database message ID for the outbound message\n    to_number: Recipient phone number\n    message_body: Message to send",
          "complexity": 8
        },
        {
          "name": "track_usage",
          "line": 277,
          "args": 3,
          "docstring": "Track usage for billing purposes\n\nArgs:\n    user_id: Database user ID\n    usage_type: Type of usage ('sms_sent', 'sms_received', 'ai_response')\n    quantity: Amount to track",
          "complexity": 4
        },
        {
          "name": "check_usage_limits",
          "line": 337,
          "args": 1,
          "docstring": "Check if user is approaching usage limits and send notifications\n\nArgs:\n    user_id: Database user ID",
          "complexity": 11
        },
        {
          "name": "send_usage_warning",
          "line": 412,
          "args": 5,
          "docstring": "Send usage warning email to user\n\nArgs:\n    user_id: Database user ID\n    warning_type: 'warning', 'critical', 'limit_exceeded'\n    usage_percentage: Current usage percentage\n    current_usage: Current usage count\n    limit: Usage limit",
          "complexity": 5
        },
        {
          "name": "cleanup_expired_trials",
          "line": 466,
          "args": 0,
          "docstring": "Cleanup expired trial accounts\nRun this task daily via cron",
          "complexity": 7
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "import",
          "module": "os",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "celery",
          "name": "Celery",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 4
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 5
        },
        {
          "type": "import",
          "module": "time",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "app",
          "name": "create_app",
          "alias": null,
          "line": 49
        },
        {
          "type": "from_import",
          "module": "app.models.user",
          "name": "User",
          "alias": null,
          "line": 50
        },
        {
          "type": "from_import",
          "module": "app.models.message",
          "name": "Message",
          "alias": null,
          "line": 51
        },
        {
          "type": "from_import",
          "module": "app.services.ai_service",
          "name": "AIService",
          "alias": null,
          "line": 52
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 53
        },
        {
          "type": "from_import",
          "module": "app",
          "name": "create_app",
          "alias": null,
          "line": 186
        },
        {
          "type": "from_import",
          "module": "app.models.user",
          "name": "User",
          "alias": null,
          "line": 187
        },
        {
          "type": "from_import",
          "module": "app.models.message",
          "name": "Message",
          "alias": null,
          "line": 188
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 189
        },
        {
          "type": "from_import",
          "module": "signalwire.rest",
          "name": "Client",
          "alias": "SignalWireClient",
          "line": 190
        },
        {
          "type": "from_import",
          "module": "app",
          "name": "create_app",
          "alias": null,
          "line": 287
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 288
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "date",
          "alias": null,
          "line": 289
        },
        {
          "type": "from_import",
          "module": "app",
          "name": "create_app",
          "alias": null,
          "line": 345
        },
        {
          "type": "from_import",
          "module": "app.models.user",
          "name": "User",
          "alias": null,
          "line": 346
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 347
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "date",
          "alias": null,
          "line": 348
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "timedelta",
          "alias": null,
          "line": 348
        },
        {
          "type": "from_import",
          "module": "app",
          "name": "create_app",
          "alias": null,
          "line": 424
        },
        {
          "type": "from_import",
          "module": "app.models.user",
          "name": "User",
          "alias": null,
          "line": 425
        },
        {
          "type": "from_import",
          "module": "app",
          "name": "create_app",
          "alias": null,
          "line": 472
        },
        {
          "type": "from_import",
          "module": "app.models.user",
          "name": "User",
          "alias": null,
          "line": 473
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 474
        },
        {
          "type": "from_import",
          "module": "app",
          "name": "create_app",
          "alias": null,
          "line": 153
        },
        {
          "type": "from_import",
          "module": "app.models.message",
          "name": "Message",
          "alias": null,
          "line": 154
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 155
        },
        {
          "type": "from_import",
          "module": "app",
          "name": "create_app",
          "alias": null,
          "line": 252
        },
        {
          "type": "from_import",
          "module": "app.models.message",
          "name": "Message",
          "alias": null,
          "line": 253
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 254
        },
        {
          "type": "from_import",
          "module": "app.models.billing",
          "name": "UsageRecord",
          "alias": null,
          "line": 296
        },
        {
          "type": "from_import",
          "module": "app.models.subscription",
          "name": "Subscription",
          "alias": null,
          "line": 354
        },
        {
          "type": "from_import",
          "module": "app.models.billing",
          "name": "UsageRecord",
          "alias": null,
          "line": 355
        }
      ],
      "complexity": 47,
      "issues": [
        "Line 437: Line too long (147 chars)",
        "Line 440: Line too long (148 chars)",
        "Line 443: Line too long (164 chars)",
        "Line 448: TODO/FIXME comment found",
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/tasks/scheduler.py",
      "lines": 35,
      "functions": [
        {
          "name": "init_scheduler",
          "line": 8,
          "args": 1,
          "docstring": "Initialize the task scheduler",
          "complexity": 1
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "flask",
          "name": "current_app",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "app.tasks.billing",
          "name": "update_all_usage_tracking",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "app.tasks.billing",
          "name": "process_monthly_billing",
          "alias": null,
          "line": 3
        },
        {
          "type": "import",
          "module": "atexit",
          "alias": null,
          "line": 4
        },
        {
          "type": "from_import",
          "module": "apscheduler.schedulers.background",
          "name": "BackgroundScheduler",
          "alias": null,
          "line": 5
        },
        {
          "type": "from_import",
          "module": "apscheduler.triggers.cron",
          "name": "CronTrigger",
          "alias": null,
          "line": 6
        }
      ],
      "complexity": 1,
      "issues": []
    },
    {
      "path": "app/admin/billing_admin.py",
      "lines": 463,
      "functions": [
        {
          "name": "admin_dashboard",
          "line": 393,
          "args": 0,
          "docstring": "Admin billing dashboard",
          "complexity": 1
        },
        {
          "name": "search_customers",
          "line": 401,
          "args": 0,
          "docstring": "Search customers",
          "complexity": 2
        },
        {
          "name": "customer_details",
          "line": 413,
          "args": 1,
          "docstring": "Get customer billing details",
          "complexity": 2
        },
        {
          "name": "apply_adjustment",
          "line": 425,
          "args": 0,
          "docstring": "Apply billing adjustment",
          "complexity": 1
        },
        {
          "name": "force_pay_invoice",
          "line": 442,
          "args": 1,
          "docstring": "Force pay invoice",
          "complexity": 2
        },
        {
          "name": "cancel_with_refund",
          "line": 453,
          "args": 1,
          "docstring": "Cancel subscription with refund",
          "complexity": 2
        },
        {
          "name": "get_billing_overview",
          "line": 33,
          "args": 0,
          "docstring": "Get comprehensive billing overview for admin dashboard",
          "complexity": 3
        },
        {
          "name": "search_customers",
          "line": 110,
          "args": 2,
          "docstring": "Search customers by email, name, or subscription details",
          "complexity": 3
        },
        {
          "name": "get_customer_billing_details",
          "line": 148,
          "args": 1,
          "docstring": "Get comprehensive billing details for a specific customer",
          "complexity": 4
        },
        {
          "name": "apply_billing_adjustment",
          "line": 201,
          "args": 5,
          "docstring": "Apply billing adjustment (credit, debit, refund, etc.)",
          "complexity": 5
        },
        {
          "name": "force_invoice_payment",
          "line": 264,
          "args": 2,
          "docstring": "Force mark an invoice as paid (admin override)",
          "complexity": 5
        },
        {
          "name": "cancel_subscription_with_refund",
          "line": 320,
          "args": 3,
          "docstring": "Cancel subscription and process refund",
          "complexity": 13
        }
      ],
      "classes": [
        {
          "name": "BillingAdmin",
          "line": 29,
          "methods": 6,
          "docstring": "Administrative tools for billing management"
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "timedelta",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "Blueprint",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "request",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "jsonify",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "render_template",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "redirect",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "url_for",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "flash",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "flask_login",
          "name": "login_required",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "sqlalchemy",
          "name": "func",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "sqlalchemy",
          "name": "desc",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "sqlalchemy",
          "name": "asc",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "app.models.user",
          "name": "User",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "app.models.subscription",
          "name": "Subscription",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "app.models.subscription",
          "name": "SubscriptionPlan",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "app.models.payment",
          "name": "Payment",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "app.models.payment",
          "name": "PaymentMethod",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "app.models.invoice",
          "name": "Invoice",
          "alias": null,
          "line": 17
        },
        {
          "type": "from_import",
          "module": "app.models.usage",
          "name": "Usage",
          "alias": null,
          "line": 18
        },
        {
          "type": "from_import",
          "module": "app.models.billing_settings",
          "name": "BillingSettings",
          "alias": null,
          "line": 19
        },
        {
          "type": "from_import",
          "module": "app.services.payment_processor",
          "name": "PaymentProcessor",
          "alias": null,
          "line": 20
        },
        {
          "type": "from_import",
          "module": "app.services.invoice_generator",
          "name": "InvoiceGenerator",
          "alias": null,
          "line": 21
        },
        {
          "type": "from_import",
          "module": "app.services.notification_service",
          "name": "NotificationService",
          "alias": null,
          "line": 22
        },
        {
          "type": "from_import",
          "module": "app.utils.decorators",
          "name": "admin_required",
          "alias": null,
          "line": 23
        },
        {
          "type": "from_import",
          "module": "app.models.credit_transaction",
          "name": "CreditTransaction",
          "alias": null,
          "line": 210
        },
        {
          "type": "from_import",
          "module": "app.models.payment",
          "name": "Payment",
          "alias": null,
          "line": 275
        },
        {
          "type": "import",
          "module": "uuid",
          "alias": null,
          "line": 276
        }
      ],
      "complexity": 43,
      "issues": [
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/models/__init__.py",
      "lines": 39,
      "functions": [],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "user",
          "name": "User",
          "alias": null,
          "line": 4
        },
        {
          "type": "from_import",
          "module": "subscription",
          "name": "Subscription",
          "alias": null,
          "line": 5
        },
        {
          "type": "from_import",
          "module": "subscription",
          "name": "SubscriptionPlan",
          "alias": null,
          "line": 5
        },
        {
          "type": "from_import",
          "module": "message",
          "name": "Message",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "client",
          "name": "Client",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "billing",
          "name": "Invoice",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "billing",
          "name": "InvoiceItem",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "billing",
          "name": "PaymentMethod",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "billing",
          "name": "Payment",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "credit_transaction",
          "name": "CreditTransaction",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "billing_settings",
          "name": "BillingSettings",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "usage",
          "name": "UseageRecord",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "utility",
          "name": "ActivityLog",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "utility",
          "name": "NotificationLog",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "utility",
          "name": "MessageTemplate",
          "alias": null,
          "line": 16
        }
      ],
      "complexity": 0,
      "issues": []
    },
    {
      "path": "app/models/message.py",
      "lines": 124,
      "functions": [
        {
          "name": "__init__",
          "line": 47,
          "args": 1,
          "docstring": null,
          "complexity": 2
        },
        {
          "name": "generate_thread_id",
          "line": 54,
          "args": 1,
          "docstring": "Generate thread ID for conversation grouping",
          "complexity": 1
        },
        {
          "name": "is_from_client",
          "line": 65,
          "args": 1,
          "docstring": "Check if message is from client (inbound)",
          "complexity": 1
        },
        {
          "name": "client_number",
          "line": 70,
          "args": 1,
          "docstring": "Get client phone number",
          "complexity": 1
        },
        {
          "name": "conversation_partner",
          "line": 75,
          "args": 1,
          "docstring": "Get the other party in conversation",
          "complexity": 3
        },
        {
          "name": "to_dict",
          "line": 82,
          "args": 2,
          "docstring": "Convert message to dictionary",
          "complexity": 2
        },
        {
          "name": "get_conversation_history",
          "line": 113,
          "args": 3,
          "docstring": "Get conversation history between user and client",
          "complexity": 1
        },
        {
          "name": "__repr__",
          "line": 123,
          "args": 1,
          "docstring": null,
          "complexity": 1
        }
      ],
      "classes": [
        {
          "name": "Message",
          "line": 5,
          "methods": 8,
          "docstring": "Message model for SMS conversations"
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "flask_sqlalchemy",
          "name": "SQLAlchemy",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 3
        },
        {
          "type": "import",
          "module": "hashlib",
          "alias": null,
          "line": 56
        }
      ],
      "complexity": 12,
      "issues": [
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/models/invoice.py",
      "error": "unmatched ')' (<unknown>, line 13)",
      "issues": [
        "Failed to parse: unmatched ')' (<unknown>, line 13)"
      ]
    },
    {
      "path": "app/models/utility.py",
      "lines": 217,
      "functions": [
        {
          "name": "details_dict",
          "line": 22,
          "args": 1,
          "docstring": "Return details as dictionary",
          "complexity": 2
        },
        {
          "name": "to_dict",
          "line": 28,
          "args": 1,
          "docstring": "Convert activity log to dictionary",
          "complexity": 1
        },
        {
          "name": "update_last_used",
          "line": 59,
          "args": 1,
          "docstring": "Update last used timestamp",
          "complexity": 1
        },
        {
          "name": "is_valid",
          "line": 64,
          "args": 1,
          "docstring": "Check if API key is valid and not expired",
          "complexity": 4
        },
        {
          "name": "to_dict",
          "line": 74,
          "args": 1,
          "docstring": "Convert API key to dictionary (without actual key)",
          "complexity": 1
        },
        {
          "name": "is_enabled",
          "line": 108,
          "args": 4,
          "docstring": "Check if notification is enabled",
          "complexity": 2
        },
        {
          "name": "to_dict",
          "line": 122,
          "args": 1,
          "docstring": "Convert notification setting to dictionary",
          "complexity": 1
        },
        {
          "name": "log_notification",
          "line": 152,
          "args": 7,
          "docstring": "Log a notification",
          "complexity": 1
        },
        {
          "name": "to_dict",
          "line": 168,
          "args": 1,
          "docstring": "Convert notification log to dictionary",
          "complexity": 1
        },
        {
          "name": "increment_usage",
          "line": 201,
          "args": 1,
          "docstring": "Increment usage count",
          "complexity": 1
        },
        {
          "name": "to_dict",
          "line": 205,
          "args": 1,
          "docstring": null,
          "complexity": 1
        }
      ],
      "classes": [
        {
          "name": "ActivityLog",
          "line": 5,
          "methods": 2,
          "docstring": null
        },
        {
          "name": "APIKey",
          "line": 42,
          "methods": 3,
          "docstring": null
        },
        {
          "name": "NotificationSetting",
          "line": 87,
          "methods": 2,
          "docstring": null
        },
        {
          "name": "NotificationLog",
          "line": 135,
          "methods": 2,
          "docstring": null
        },
        {
          "name": "MessageTemplate",
          "line": 180,
          "methods": 2,
          "docstring": null
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 2
        },
        {
          "type": "import",
          "module": "json",
          "alias": null,
          "line": 3
        }
      ],
      "complexity": 16,
      "issues": []
    },
    {
      "path": "app/models/user.py",
      "lines": 145,
      "functions": [
        {
          "name": "set_password",
          "line": 49,
          "args": 2,
          "docstring": "Set password hash",
          "complexity": 2
        },
        {
          "name": "check_password",
          "line": 58,
          "args": 2,
          "docstring": "Check password against hash",
          "complexity": 1
        },
        {
          "name": "full_name",
          "line": 63,
          "args": 1,
          "docstring": "Get full name",
          "complexity": 3
        },
        {
          "name": "get_active_subscription",
          "line": 69,
          "args": 1,
          "docstring": "Get user's active subscription",
          "complexity": 1
        },
        {
          "name": "get_default_payment_method",
          "line": 73,
          "args": 1,
          "docstring": "Get user's default payment method",
          "complexity": 1
        },
        {
          "name": "to_dict",
          "line": 77,
          "args": 2,
          "docstring": null,
          "complexity": 6
        },
        {
          "name": "to_dict_safe",
          "line": 130,
          "args": 1,
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "__repr__",
          "line": 144,
          "args": 1,
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "safe_isoformat",
          "line": 79,
          "args": 1,
          "docstring": null,
          "complexity": 3
        }
      ],
      "classes": [
        {
          "name": "User",
          "line": 6,
          "methods": 8,
          "docstring": "User model with proper billing relationships"
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "werkzeug.security",
          "name": "generate_password_hash",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "werkzeug.security",
          "name": "check_password_hash",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 4
        }
      ],
      "complexity": 19,
      "issues": [
        "Line 113: Line too long (141 chars)",
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/models/revoked_token.py",
      "lines": 33,
      "functions": [
        {
          "name": "__repr__",
          "line": 13,
          "args": 1,
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "is_token_revoked",
          "line": 17,
          "args": 2,
          "docstring": "Check if a token is revoked",
          "complexity": 1
        },
        {
          "name": "revoke_token",
          "line": 22,
          "args": 3,
          "docstring": "Revoke a token",
          "complexity": 1
        },
        {
          "name": "clean_expired_tokens",
          "line": 30,
          "args": 1,
          "docstring": "Remove expired tokens from the database",
          "complexity": 1
        }
      ],
      "classes": [
        {
          "name": "RevokedToken",
          "line": 5,
          "methods": 4,
          "docstring": null
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 3
        }
      ],
      "complexity": 4,
      "issues": [
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/models/billing.py",
      "lines": 259,
      "functions": [
        {
          "name": "to_dict",
          "line": 48,
          "args": 1,
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "to_dict",
          "line": 110,
          "args": 1,
          "docstring": null,
          "complexity": 2
        },
        {
          "name": "to_dict",
          "line": 179,
          "args": 2,
          "docstring": null,
          "complexity": 5
        },
        {
          "name": "to_dict",
          "line": 243,
          "args": 1,
          "docstring": null,
          "complexity": 2
        }
      ],
      "classes": [
        {
          "name": "PaymentMethod",
          "line": 5,
          "methods": 1,
          "docstring": "SINGLE PaymentMethod model - consolidated from multiple files"
        },
        {
          "name": "Payment",
          "line": 69,
          "methods": 1,
          "docstring": "Payment model"
        },
        {
          "name": "Invoice",
          "line": 132,
          "methods": 1,
          "docstring": "Invoice model"
        },
        {
          "name": "InvoiceItem",
          "line": 209,
          "methods": 1,
          "docstring": "Invoice item model"
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 3
        }
      ],
      "complexity": 10,
      "issues": []
    },
    {
      "path": "app/models/usage.py",
      "lines": 104,
      "functions": [
        {
          "name": "to_dict",
          "line": 52,
          "args": 1,
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "to_dict",
          "line": 94,
          "args": 1,
          "docstring": null,
          "complexity": 1
        }
      ],
      "classes": [
        {
          "name": "UseageRecord",
          "line": 5,
          "methods": 1,
          "docstring": "Usage tracking model"
        },
        {
          "name": "UsageOverage",
          "line": 78,
          "methods": 1,
          "docstring": "Usage overage tracking"
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 3
        }
      ],
      "complexity": 2,
      "issues": []
    },
    {
      "path": "app/models/api_key.py",
      "lines": 38,
      "functions": [
        {
          "name": "__repr__",
          "line": 22,
          "args": 1,
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "to_dict",
          "line": 25,
          "args": 1,
          "docstring": null,
          "complexity": 1
        }
      ],
      "classes": [
        {
          "name": "APIKey",
          "line": 4,
          "methods": 2,
          "docstring": null
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 2
        },
        {
          "type": "import",
          "module": "json",
          "alias": null,
          "line": 26
        }
      ],
      "complexity": 2,
      "issues": [
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/models/subscription.py",
      "lines": 140,
      "functions": [
        {
          "name": "to_dict",
          "line": 42,
          "args": 1,
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "to_dict",
          "line": 111,
          "args": 2,
          "docstring": null,
          "complexity": 2
        }
      ],
      "classes": [
        {
          "name": "SubscriptionPlan",
          "line": 6,
          "methods": 1,
          "docstring": "Subscription plan model"
        },
        {
          "name": "Subscription",
          "line": 63,
          "methods": 1,
          "docstring": "User subscription model"
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 3
        },
        {
          "type": "import",
          "module": "json",
          "alias": null,
          "line": 4
        }
      ],
      "complexity": 3,
      "issues": [
        "Line 72: Line too long (121 chars)",
        "Line 138: Line too long (141 chars)"
      ]
    },
    {
      "path": "app/models/signalwire_account.py",
      "lines": 93,
      "functions": [
        {
          "name": "to_dict",
          "line": 34,
          "args": 1,
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "get_capabilities",
          "line": 73,
          "args": 1,
          "docstring": null,
          "complexity": 2
        },
        {
          "name": "set_capabilities",
          "line": 78,
          "args": 2,
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "to_dict",
          "line": 81,
          "args": 1,
          "docstring": null,
          "complexity": 1
        }
      ],
      "classes": [
        {
          "name": "SignalWireAccount",
          "line": 5,
          "methods": 1,
          "docstring": "Tracks SignalWire subaccounts for each subscriber"
        },
        {
          "name": "SignalWirePhoneNumber",
          "line": 48,
          "methods": 3,
          "docstring": "Tracks phone numbers assigned to SignalWire accounts"
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 2
        },
        {
          "type": "import",
          "module": "json",
          "alias": null,
          "line": 3
        }
      ],
      "complexity": 5,
      "issues": []
    },
    {
      "path": "app/models/banned_words.py",
      "lines": 26,
      "functions": [
        {
          "name": "to_dict",
          "line": 17,
          "args": 1,
          "docstring": null,
          "complexity": 1
        }
      ],
      "classes": [
        {
          "name": "BannedWord",
          "line": 5,
          "methods": 1,
          "docstring": null
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 2
        }
      ],
      "complexity": 1,
      "issues": []
    },
    {
      "path": "app/models/client.py",
      "lines": 262,
      "functions": [
        {
          "name": "__init__",
          "line": 37,
          "args": 1,
          "docstring": null,
          "complexity": 3
        },
        {
          "name": "display_name",
          "line": 44,
          "args": 1,
          "docstring": "Get display name for client",
          "complexity": 2
        },
        {
          "name": "is_new_client",
          "line": 51,
          "args": 1,
          "docstring": "Check if client is new (less than 7 days old)",
          "complexity": 1
        },
        {
          "name": "last_message_date",
          "line": 57,
          "args": 1,
          "docstring": "Get date of last message",
          "complexity": 1
        },
        {
          "name": "update_contact_info",
          "line": 62,
          "args": 4,
          "docstring": "Update client contact information",
          "complexity": 4
        },
        {
          "name": "block_client",
          "line": 72,
          "args": 2,
          "docstring": "Block client",
          "complexity": 4
        },
        {
          "name": "unblock_client",
          "line": 82,
          "args": 1,
          "docstring": "Unblock client",
          "complexity": 1
        },
        {
          "name": "update_last_contact",
          "line": 88,
          "args": 1,
          "docstring": "Update last contact timestamp",
          "complexity": 1
        },
        {
          "name": "get_message_history",
          "line": 93,
          "args": 3,
          "docstring": "Get message history with specific user",
          "complexity": 1
        },
        {
          "name": "get_user_relationship",
          "line": 101,
          "args": 2,
          "docstring": "Get relationship details with specific user",
          "complexity": 2
        },
        {
          "name": "update_user_relationship",
          "line": 119,
          "args": 5,
          "docstring": "Update relationship with specific user",
          "complexity": 9
        },
        {
          "name": "to_dict",
          "line": 164,
          "args": 3,
          "docstring": "Convert client to dictionary",
          "complexity": 4
        },
        {
          "name": "find_or_create",
          "line": 203,
          "args": 4,
          "docstring": "Find existing client or create new one",
          "complexity": 4
        },
        {
          "name": "get_user_clients",
          "line": 231,
          "args": 5,
          "docstring": "Get all clients for a specific user",
          "complexity": 4
        }
      ],
      "classes": [
        {
          "name": "Client",
          "line": 5,
          "methods": 14,
          "docstring": null
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "timedelta",
          "alias": null,
          "line": 262
        },
        {
          "type": "from_import",
          "module": "app.models.message",
          "name": "Message",
          "alias": null,
          "line": 95
        },
        {
          "type": "from_import",
          "module": "app.models.user",
          "name": "user_clients",
          "alias": null,
          "line": 103
        },
        {
          "type": "from_import",
          "module": "app.models.user",
          "name": "user_clients",
          "alias": null,
          "line": 122
        },
        {
          "type": "from_import",
          "module": "app.models.user",
          "name": "user_clients",
          "alias": null,
          "line": 234
        }
      ],
      "complexity": 41,
      "issues": [
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/models/billing_settings.py",
      "lines": 95,
      "functions": [
        {
          "name": "create_default",
          "line": 61,
          "args": 1,
          "docstring": "Create default billing settings for a user",
          "complexity": 1
        },
        {
          "name": "to_dict",
          "line": 75,
          "args": 1,
          "docstring": null,
          "complexity": 1
        }
      ],
      "classes": [
        {
          "name": "BillingSettings",
          "line": 6,
          "methods": 2,
          "docstring": "Billing settings model"
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 4
        }
      ],
      "complexity": 2,
      "issues": []
    },
    {
      "path": "app/models/credit_transaction.py",
      "lines": 54,
      "functions": [
        {
          "name": "to_dict",
          "line": 39,
          "args": 1,
          "docstring": null,
          "complexity": 1
        }
      ],
      "classes": [
        {
          "name": "CreditTransaction",
          "line": 8,
          "methods": 1,
          "docstring": "Credit transaction model"
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 5
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 6
        }
      ],
      "complexity": 1,
      "issues": []
    },
    {
      "path": "app/routes/onboarding.py",
      "lines": 386,
      "functions": [
        {
          "name": "get_onboarding_status",
          "line": 19,
          "args": 0,
          "docstring": "Get user's onboarding status and requirements",
          "complexity": 3
        },
        {
          "name": "search_phone_numbers",
          "line": 43,
          "args": 0,
          "docstring": "Search for available phone numbers in Ontario",
          "complexity": 9
        },
        {
          "name": "purchase_phone_number",
          "line": 121,
          "args": 0,
          "docstring": "Purchase selected phone number and complete SignalWire setup",
          "complexity": 13
        },
        {
          "name": "verify_onboarding_requirements",
          "line": 255,
          "args": 0,
          "docstring": "Verify user has met all requirements for phone number setup",
          "complexity": 7
        },
        {
          "name": "complete_onboarding",
          "line": 308,
          "args": 0,
          "docstring": "Mark onboarding as complete and finalize setup",
          "complexity": 5
        },
        {
          "name": "test_signalwire_connection",
          "line": 353,
          "args": 0,
          "docstring": "Test SignalWire service connection (development only)",
          "complexity": 4
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "flask",
          "name": "Blueprint",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "request",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "jsonify",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "current_app",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "flask_jwt_extended",
          "name": "jwt_required",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "flask_jwt_extended",
          "name": "get_jwt_identity",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "timedelta",
          "alias": null,
          "line": 3
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 4
        },
        {
          "type": "from_import",
          "module": "app.models.user",
          "name": "User",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "app.models.subscription",
          "name": "Subscription",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "app.models.subscription",
          "name": "SubscriptionPlan",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "app.models.billing",
          "name": "PaymentMethod",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "app.services.signalwire_service",
          "name": "SignalWireService",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "app.utils.validators",
          "name": "validate_json_data",
          "alias": null,
          "line": 11
        }
      ],
      "complexity": 41,
      "issues": [
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/utils/__init__.py",
      "lines": 137,
      "functions": [
        {
          "name": "send_message",
          "line": 76,
          "args": 3,
          "docstring": "Send SMS message using available SMS service",
          "complexity": 2
        },
        {
          "name": "generate_text_response",
          "line": 85,
          "args": 2,
          "docstring": "Generate text response using available LLM service",
          "complexity": 2
        },
        {
          "name": "get_service_status",
          "line": 94,
          "args": 0,
          "docstring": "Get status of all available services",
          "complexity": 6
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "signalwire_helpers",
          "name": "get_signalwire_client",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "signalwire_helpers",
          "name": "send_sms",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "signalwire_helpers",
          "name": "validate_signalwire_request",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "signalwire_helpers",
          "name": "get_phone_number_info",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "signalwire_helpers",
          "name": "format_phone_number",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "signalwire_helpers",
          "name": "get_available_phone_numbers",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "signalwire_helpers",
          "name": "purchase_phone_number",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "signalwire_helpers",
          "name": "configure_webhook",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "ollama_helpers",
          "name": "get_ollama_client",
          "alias": null,
          "line": 27
        },
        {
          "type": "from_import",
          "module": "ollama_helpers",
          "name": "generate_ai_response",
          "alias": null,
          "line": 27
        },
        {
          "type": "from_import",
          "module": "ollama_helpers",
          "name": "chat_completion",
          "alias": null,
          "line": 27
        },
        {
          "type": "from_import",
          "module": "ollama_helpers",
          "name": "is_llm_available",
          "alias": null,
          "line": 27
        },
        {
          "type": "from_import",
          "module": "ollama_helpers",
          "name": "get_llm_health",
          "alias": null,
          "line": 27
        },
        {
          "type": "from_import",
          "module": "ollama_helpers",
          "name": "OllamaClient",
          "alias": null,
          "line": 27
        },
        {
          "type": "from_import",
          "module": "security",
          "name": "*",
          "alias": null,
          "line": 43
        }
      ],
      "complexity": 10,
      "issues": [
        "Line 23: print() statement (use logging instead)",
        "Line 39: print() statement (use logging instead)"
      ]
    },
    {
      "path": "app/utils/validators.py",
      "lines": 85,
      "functions": [
        {
          "name": "validate_json_data",
          "line": 6,
          "args": 2,
          "docstring": "Validate JSON data against a simple schema\n\nArgs:\n    data: The data to validate\n    schema: Schema definition with field requirements\n    \nReturns:\n    Error message if validation fails, None if successful",
          "complexity": 33
        },
        {
          "name": "validate_phone_number",
          "line": 75,
          "args": 1,
          "docstring": "Validate phone number format",
          "complexity": 1
        },
        {
          "name": "validate_email",
          "line": 81,
          "args": 1,
          "docstring": "Validate email format",
          "complexity": 1
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Union",
          "alias": null,
          "line": 2
        },
        {
          "type": "import",
          "module": "re",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 4
        }
      ],
      "complexity": 35,
      "issues": []
    },
    {
      "path": "app/utils/normalize_phone.py",
      "lines": 53,
      "functions": [
        {
          "name": "normalize_phone_number",
          "line": 6,
          "args": 2,
          "docstring": "Normalize a phone number to E.164 format.\n\nArgs:\n    phone_number: Phone number string to normalize\n    default_country: Default country code if not provided\n    \nReturns:\n    str: Normalized phone number in E.164 format",
          "complexity": 4
        },
        {
          "name": "basic_normalize_phone",
          "line": 36,
          "args": 1,
          "docstring": "Basic phone number normalization fallback",
          "complexity": 5
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "import",
          "module": "re",
          "alias": null,
          "line": 1
        },
        {
          "type": "import",
          "module": "phonenumbers",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "phonenumbers",
          "name": "carrier",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "phonenumbers.phonenumberutil",
          "name": "number_type",
          "alias": null,
          "line": 4
        }
      ],
      "complexity": 9,
      "issues": []
    },
    {
      "path": "app/utils/ollama_helpers.py",
      "lines": 152,
      "functions": [
        {
          "name": "get_ollama_client",
          "line": 142,
          "args": 0,
          "docstring": "Get global Ollama client instance",
          "complexity": 2
        },
        {
          "name": "generate_sms_response",
          "line": 149,
          "args": 2,
          "docstring": "Generate SMS response using Ollama",
          "complexity": 2
        },
        {
          "name": "__init__",
          "line": 12,
          "args": 4,
          "docstring": null,
          "complexity": 4
        },
        {
          "name": "generate_sms_response",
          "line": 22,
          "args": 3,
          "docstring": "Generate AI response specifically for SMS messages",
          "complexity": 4
        },
        {
          "name": "_build_sms_system_prompt",
          "line": 72,
          "args": 2,
          "docstring": "Build system prompt for SMS responses",
          "complexity": 4
        },
        {
          "name": "_clean_sms_response",
          "line": 89,
          "args": 2,
          "docstring": "Clean and format response for SMS",
          "complexity": 2
        },
        {
          "name": "_get_fallback_response",
          "line": 100,
          "args": 2,
          "docstring": "Fallback response when LLM is unavailable",
          "complexity": 5
        },
        {
          "name": "health_check",
          "line": 115,
          "args": 1,
          "docstring": "Check if LLM server is healthy",
          "complexity": 4
        }
      ],
      "classes": [
        {
          "name": "OllamaClient",
          "line": 9,
          "methods": 6,
          "docstring": "Client for communicating with Ollama LLM server"
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "os",
          "alias": null,
          "line": 2
        },
        {
          "type": "import",
          "module": "requests",
          "alias": null,
          "line": 3
        },
        {
          "type": "import",
          "module": "json",
          "alias": null,
          "line": 4
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 5
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "current_app",
          "alias": null,
          "line": 7
        }
      ],
      "complexity": 27,
      "issues": [
        "Line 32: Line too long (123 chars)"
      ]
    },
    {
      "path": "app/utils/response_helpers.py",
      "lines": 33,
      "functions": [
        {
          "name": "success_response",
          "line": 4,
          "args": 3,
          "docstring": "Create a standardized success response",
          "complexity": 3
        },
        {
          "name": "error_response",
          "line": 15,
          "args": 3,
          "docstring": "Create a standardized error response",
          "complexity": 2
        },
        {
          "name": "validation_error_response",
          "line": 27,
          "args": 1,
          "docstring": "Create a validation error response",
          "complexity": 1
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "flask",
          "name": "jsonify",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 2
        }
      ],
      "complexity": 6,
      "issues": []
    },
    {
      "path": "app/utils/cors_middleware.py",
      "lines": 94,
      "functions": [
        {
          "name": "handle_cors",
          "line": 6,
          "args": 0,
          "docstring": "Custom CORS handler for complex scenarios",
          "complexity": 2
        },
        {
          "name": "handle_preflight_request",
          "line": 24,
          "args": 0,
          "docstring": "Handle CORS preflight requests",
          "complexity": 2
        },
        {
          "name": "add_cors_headers",
          "line": 44,
          "args": 1,
          "docstring": "Add CORS headers to response",
          "complexity": 2
        },
        {
          "name": "is_origin_allowed",
          "line": 57,
          "args": 1,
          "docstring": "Check if origin is in allowed list",
          "complexity": 5
        },
        {
          "name": "cors_enabled",
          "line": 82,
          "args": 1,
          "docstring": "Decorator to enable CORS on specific endpoints",
          "complexity": 2
        },
        {
          "name": "decorator",
          "line": 10,
          "args": 1,
          "docstring": null,
          "complexity": 2
        },
        {
          "name": "decorated_function",
          "line": 87,
          "args": 0,
          "docstring": null,
          "complexity": 2
        },
        {
          "name": "decorated_function",
          "line": 12,
          "args": 0,
          "docstring": null,
          "complexity": 2
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "flask",
          "name": "request",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "make_response",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "current_app",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "functools",
          "name": "wraps",
          "alias": null,
          "line": 4
        }
      ],
      "complexity": 19,
      "issues": []
    },
    {
      "path": "app/utils/security.py",
      "lines": 591,
      "functions": [
        {
          "name": "init_app",
          "line": 27,
          "args": 1,
          "docstring": "Initialize security module with Flask app context",
          "complexity": 10
        },
        {
          "name": "generate_token",
          "line": 62,
          "args": 3,
          "docstring": "Generate a JWT token for a user.\n\nArgs:\n    user_id: User identifier\n    expiration: Token lifetime in seconds\n    additional_claims: Dictionary of additional JWT claims\n    \nReturns:\n    str: JWT token",
          "complexity": 2
        },
        {
          "name": "verify_token",
          "line": 95,
          "args": 1,
          "docstring": "Verify a JWT token.\n\nArgs:\n    token: JWT token to verify\n    \nReturns:\n    dict: Token payload if valid, None otherwise",
          "complexity": 5
        },
        {
          "name": "revoke_token",
          "line": 126,
          "args": 1,
          "docstring": "Revoke a JWT token by adding it to a blacklist.\n\nArgs:\n    token: JWT token to revoke\n    \nReturns:\n    bool: True if successful, False otherwise",
          "complexity": 5
        },
        {
          "name": "hash_password",
          "line": 168,
          "args": 1,
          "docstring": "Hash a password securely using bcrypt.\n\nArgs:\n    password: Plain text password\n    \nReturns:\n    str: Hashed password",
          "complexity": 1
        },
        {
          "name": "verify_password",
          "line": 183,
          "args": 2,
          "docstring": "Verify a password against its hash.\n\nArgs:\n    password: Plain text password\n    password_hash: Stored password hash\n    \nReturns:\n    bool: True if password matches, False otherwise",
          "complexity": 1
        },
        {
          "name": "validate_password_strength",
          "line": 197,
          "args": 1,
          "docstring": "Check if a password meets strength requirements.\n\nArgs:\n    password: Password to check\n    \nReturns:\n    tuple: (bool, str) - (is_valid, reason_if_invalid)",
          "complexity": 6
        },
        {
          "name": "generate_api_key",
          "line": 231,
          "args": 0,
          "docstring": "Generate a new API key.\n\nReturns:\n    str: Newly generated API key",
          "complexity": 1
        },
        {
          "name": "validate_api_key",
          "line": 247,
          "args": 1,
          "docstring": "Validate an API key.\n\nArgs:\n    api_key: API key to validate\n    \nReturns:\n    dict: API key information if valid, None otherwise",
          "complexity": 6
        },
        {
          "name": "revoke_api_key",
          "line": 286,
          "args": 1,
          "docstring": "Revoke an API key.\n\nArgs:\n    api_key: API key to revoke\n    \nReturns:\n    bool: True if successful, False otherwise",
          "complexity": 3
        },
        {
          "name": "get_api_key_info",
          "line": 317,
          "args": 1,
          "docstring": "Get information about an API key.\n\nArgs:\n    api_key: API key to get information for\n    \nReturns:\n    dict: API key information if found, None otherwise",
          "complexity": 1
        },
        {
          "name": "_hash_api_key",
          "line": 331,
          "args": 1,
          "docstring": "Hash an API key for secure storage.\n\nArgs:\n    api_key: API key to hash\n    \nReturns:\n    str: Hashed API key",
          "complexity": 1
        },
        {
          "name": "require_api_key",
          "line": 344,
          "args": 1,
          "docstring": "Decorator for routes that require an API key.\n\nArgs:\n    f: Function to decorate\n    \nReturns:\n    decorated function",
          "complexity": 4
        },
        {
          "name": "validate_email_address",
          "line": 378,
          "args": 1,
          "docstring": "Validate an email address format.\n\nArgs:\n    email: Email address to validate\n    \nReturns:\n    bool: True if valid, False otherwise",
          "complexity": 1
        },
        {
          "name": "validate_phone_number",
          "line": 394,
          "args": 1,
          "docstring": "Validate a phone number format (E.164).\n\nArgs:\n    phone_number: Phone number to validate\n    \nReturns:\n    bool: True if valid, False otherwise",
          "complexity": 1
        },
        {
          "name": "sanitize_input",
          "line": 410,
          "args": 1,
          "docstring": "Sanitize user input to prevent injection attacks.\n\nArgs:\n    text: Input to sanitize\n    \nReturns:\n    str: Sanitized input",
          "complexity": 2
        },
        {
          "name": "mask_sensitive_data",
          "line": 429,
          "args": 2,
          "docstring": "Mask sensitive data like credit card numbers, SSNs, etc.\n\nArgs:\n    data: Data to mask\n    field_type: Type of field (card, ssn, phone, etc.)\n    \nReturns:\n    str: Masked data",
          "complexity": 6
        },
        {
          "name": "generate_secure_key",
          "line": 469,
          "args": 1,
          "docstring": "Generate a cryptographically secure random key.\n\nArgs:\n    length: Length of key in bytes\n    \nReturns:\n    str: Base64-encoded key",
          "complexity": 1
        },
        {
          "name": "generate_verification_code",
          "line": 483,
          "args": 1,
          "docstring": "Generate a numeric verification code.\n\nArgs:\n    length: Code length\n    \nReturns:\n    str: Verification code",
          "complexity": 1
        },
        {
          "name": "secure_compare",
          "line": 496,
          "args": 2,
          "docstring": "Compare two strings in a timing-safe manner.\n\nArgs:\n    a: First string\n    b: Second string\n    \nReturns:\n    bool: True if equal, False otherwise",
          "complexity": 1
        },
        {
          "name": "rate_limit",
          "line": 510,
          "args": 3,
          "docstring": "Implement rate limiting.\n\nArgs:\n    key: Rate limit key (e.g., user_id or IP)\n    limit: Maximum number of requests\n    period: Time period in seconds\n    \nReturns:\n    tuple: (bool, dict) - (is_allowed, rate_limit_info)",
          "complexity": 3
        },
        {
          "name": "log_security_event",
          "line": 556,
          "args": 4,
          "docstring": "Log a security-related event.\n\nArgs:\n    event_type: Type of security event\n    details: Event details\n    user_id: User ID if applicable\n    ip_address: IP address if applicable\n    \nReturns:\n    bool: True if logged successfully, False otherwise",
          "complexity": 3
        },
        {
          "name": "decorated",
          "line": 355,
          "args": 0,
          "docstring": null,
          "complexity": 4
        },
        {
          "name": "check_api_key",
          "line": 39,
          "args": 0,
          "docstring": null,
          "complexity": 8
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "import",
          "module": "base64",
          "alias": null,
          "line": 6
        },
        {
          "type": "import",
          "module": "hashlib",
          "alias": null,
          "line": 7
        },
        {
          "type": "import",
          "module": "hmac",
          "alias": null,
          "line": 8
        },
        {
          "type": "import",
          "module": "json",
          "alias": null,
          "line": 9
        },
        {
          "type": "import",
          "module": "os",
          "alias": null,
          "line": 10
        },
        {
          "type": "import",
          "module": "re",
          "alias": null,
          "line": 11
        },
        {
          "type": "import",
          "module": "secrets",
          "alias": null,
          "line": 12
        },
        {
          "type": "import",
          "module": "string",
          "alias": null,
          "line": 13
        },
        {
          "type": "import",
          "module": "time",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "timedelta",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "functools",
          "name": "wraps",
          "alias": null,
          "line": 16
        },
        {
          "type": "import",
          "module": "bcrypt",
          "alias": null,
          "line": 18
        },
        {
          "type": "import",
          "module": "jwt",
          "alias": null,
          "line": 19
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "current_app",
          "alias": null,
          "line": 20
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "request",
          "alias": null,
          "line": 20
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "g",
          "alias": null,
          "line": 20
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "jsonify",
          "alias": null,
          "line": 20
        },
        {
          "type": "from_import",
          "module": "werkzeug.local",
          "name": "LocalProxy",
          "alias": null,
          "line": 21
        },
        {
          "type": "from_import",
          "module": "app.models.api_key",
          "name": "APIKey",
          "alias": null,
          "line": 257
        },
        {
          "type": "from_import",
          "module": "app.models.api_key",
          "name": "APIKey",
          "alias": null,
          "line": 296
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 297
        },
        {
          "type": "from_import",
          "module": "app.models.security_log",
          "name": "SecurityLog",
          "alias": null,
          "line": 569
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 570
        },
        {
          "type": "import",
          "module": "redis",
          "alias": null,
          "line": 33
        }
      ],
      "complexity": 77,
      "issues": [
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/utils/llm_client.py",
      "lines": 138,
      "functions": [
        {
          "name": "get_llm_client",
          "line": 130,
          "args": 0,
          "docstring": "Get or create LLM client instance",
          "complexity": 2
        },
        {
          "name": "__init__",
          "line": 14,
          "args": 1,
          "docstring": null,
          "complexity": 3
        },
        {
          "name": "generate_response",
          "line": 23,
          "args": 3,
          "docstring": "Generate AI response to incoming message",
          "complexity": 9
        },
        {
          "name": "_build_system_prompt",
          "line": 84,
          "args": 2,
          "docstring": "Build system prompt for AI assistant",
          "complexity": 3
        },
        {
          "name": "_get_fallback_response",
          "line": 101,
          "args": 2,
          "docstring": "Generate fallback response when LLM is unavailable",
          "complexity": 7
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "line": 11,
          "methods": 4,
          "docstring": "Client for communicating with LLM server"
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "os",
          "alias": null,
          "line": 4
        },
        {
          "type": "import",
          "module": "requests",
          "alias": null,
          "line": 5
        },
        {
          "type": "import",
          "module": "json",
          "alias": null,
          "line": 6
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "current_app",
          "alias": null,
          "line": 9
        }
      ],
      "complexity": 24,
      "issues": []
    },
    {
      "path": "app/utils/signalwire_client.py",
      "lines": 294,
      "functions": [
        {
          "name": "with_retry",
          "line": 86,
          "args": 2,
          "docstring": "Decorator for retry logic with exponential backoff",
          "complexity": 6
        },
        {
          "name": "get_signalwire_client",
          "line": 286,
          "args": 0,
          "docstring": "Get or create SignalWire client instance",
          "complexity": 2
        },
        {
          "name": "__init__",
          "line": 19,
          "args": 1,
          "docstring": null,
          "complexity": 2
        },
        {
          "name": "handle_error",
          "line": 57,
          "args": 3,
          "docstring": "Handle SignalWire exceptions with detailed logging",
          "complexity": 4
        },
        {
          "name": "decorator",
          "line": 89,
          "args": 1,
          "docstring": null,
          "complexity": 6
        },
        {
          "name": "__init__",
          "line": 117,
          "args": 1,
          "docstring": null,
          "complexity": 2
        },
        {
          "name": "validate_webhook_signature",
          "line": 128,
          "args": 4,
          "docstring": "Validate webhook signature for security",
          "complexity": 3
        },
        {
          "name": "search_available_numbers",
          "line": 140,
          "args": 2,
          "docstring": "Search for available phone numbers",
          "complexity": 10
        },
        {
          "name": "purchase_phone_number",
          "line": 205,
          "args": 3,
          "docstring": "Purchase a phone number with webhook configuration",
          "complexity": 3
        },
        {
          "name": "send_sms",
          "line": 238,
          "args": 4,
          "docstring": "Send SMS message",
          "complexity": 3
        },
        {
          "name": "get_message_status",
          "line": 265,
          "args": 2,
          "docstring": "Get message delivery status",
          "complexity": 2
        },
        {
          "name": "wrapper",
          "line": 91,
          "args": 0,
          "docstring": null,
          "complexity": 6
        }
      ],
      "classes": [
        {
          "name": "SignalWireConfig",
          "line": 16,
          "methods": 1,
          "docstring": "SignalWire configuration management"
        },
        {
          "name": "SignalWireErrorHandler",
          "line": 29,
          "methods": 1,
          "docstring": "Production error handling for SignalWire operations"
        },
        {
          "name": "SignalWireClient",
          "line": 114,
          "methods": 6,
          "docstring": "Production SignalWire client implementation"
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "os",
          "alias": null,
          "line": 5
        },
        {
          "type": "import",
          "module": "hmac",
          "alias": null,
          "line": 6
        },
        {
          "type": "import",
          "module": "hashlib",
          "alias": null,
          "line": 7
        },
        {
          "type": "import",
          "module": "time",
          "alias": null,
          "line": 8
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "signalwire.rest",
          "name": "Client",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "twilio.base.exceptions",
          "name": "TwilioRestException",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "functools",
          "name": "wraps",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "current_app",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "signalwire.request_validator",
          "name": "RequestValidator",
          "alias": null,
          "line": 131
        }
      ],
      "complexity": 49,
      "issues": [
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/utils/subscription_helpers.py",
      "lines": 40,
      "functions": [
        {
          "name": "is_trial_expired",
          "line": 6,
          "args": 1,
          "docstring": "Check if user's trial has expired",
          "complexity": 2
        },
        {
          "name": "calculate_trial_end_date",
          "line": 13,
          "args": 1,
          "docstring": "Calculate trial end date",
          "complexity": 1
        },
        {
          "name": "get_user_subscription_status",
          "line": 17,
          "args": 1,
          "docstring": "Get comprehensive subscription status for user",
          "complexity": 2
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "timedelta",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "app.models.subscription",
          "name": "Subscription",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "app.models.subscription",
          "name": "SubscriptionPlan",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "app.models.user",
          "name": "User",
          "alias": null,
          "line": 4
        }
      ],
      "complexity": 5,
      "issues": []
    },
    {
      "path": "app/utils/db_init.py",
      "lines": 109,
      "functions": [
        {
          "name": "init_default_data",
          "line": 7,
          "args": 0,
          "docstring": "Initialize database with default data",
          "complexity": 5
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "app.models",
          "name": "SubscriptionPlan",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "app.models",
          "name": "BannedWord",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 3
        },
        {
          "type": "import",
          "module": "json",
          "alias": null,
          "line": 4
        }
      ],
      "complexity": 5,
      "issues": [
        "Line 87: print() statement (use logging instead)",
        "Line 109: print() statement (use logging instead)"
      ]
    },
    {
      "path": "app/utils/auth_helpers.py",
      "lines": 50,
      "functions": [
        {
          "name": "require_subscription",
          "line": 7,
          "args": 1,
          "docstring": "Decorator to require specific subscription status",
          "complexity": 4
        },
        {
          "name": "require_signalwire_setup",
          "line": 32,
          "args": 0,
          "docstring": "Decorator to require completed SignalWire setup",
          "complexity": 3
        },
        {
          "name": "decorator",
          "line": 12,
          "args": 1,
          "docstring": null,
          "complexity": 3
        },
        {
          "name": "decorator",
          "line": 34,
          "args": 1,
          "docstring": null,
          "complexity": 3
        },
        {
          "name": "decorated_function",
          "line": 14,
          "args": 0,
          "docstring": null,
          "complexity": 3
        },
        {
          "name": "decorated_function",
          "line": 36,
          "args": 0,
          "docstring": null,
          "complexity": 3
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "functools",
          "name": "wraps",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "jsonify",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "request",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "flask_jwt_extended",
          "name": "get_jwt_identity",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "flask_jwt_extended",
          "name": "verify_jwt_in_request",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "app.models.user",
          "name": "User",
          "alias": null,
          "line": 4
        },
        {
          "type": "from_import",
          "module": "app.models.subscription",
          "name": "Subscription",
          "alias": null,
          "line": 5
        }
      ],
      "complexity": 19,
      "issues": []
    },
    {
      "path": "app/utils/billing_helpers.py",
      "lines": 259,
      "functions": [
        {
          "name": "calculate_proration",
          "line": 19,
          "args": 3,
          "docstring": "Calculate proration for plan changes",
          "complexity": 1
        },
        {
          "name": "validate_coupon",
          "line": 51,
          "args": 2,
          "docstring": "Validate coupon code",
          "complexity": 3
        },
        {
          "name": "calculate_tax",
          "line": 80,
          "args": 2,
          "docstring": "Calculate tax based on billing address",
          "complexity": 1
        },
        {
          "name": "generate_analytics",
          "line": 103,
          "args": 3,
          "docstring": "Generate billing analytics for user",
          "complexity": 4
        },
        {
          "name": "generate_export_data",
          "line": 147,
          "args": 4,
          "docstring": "Generate export data for billing information",
          "complexity": 11
        },
        {
          "name": "check_usage_limits",
          "line": 212,
          "args": 1,
          "docstring": "Check if subscription is approaching or exceeding usage limits",
          "complexity": 4
        }
      ],
      "classes": [
        {
          "name": "BillingHelpers",
          "line": 15,
          "methods": 6,
          "docstring": "Helper functions for billing operations"
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "timedelta",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "app.models.subscription",
          "name": "Subscription",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "app.models.subscription",
          "name": "SubscriptionPlan",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "app.models.payment",
          "name": "Payment",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "app.models.invoice",
          "name": "Invoice",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "app.models.usage",
          "name": "Usage",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "sqlalchemy",
          "name": "func",
          "alias": null,
          "line": 13
        }
      ],
      "complexity": 24,
      "issues": [
        "Line 123: Line too long (124 chars)",
        "Line 129: Line too long (122 chars)",
        "Line 258: Line too long (126 chars)",
        "Line 134: TODO/FIXME comment found",
        "Line 142: TODO/FIXME comment found",
        "Line 143: TODO/FIXME comment found"
      ]
    },
    {
      "path": "app/services/utils.py",
      "lines": 5,
      "functions": [],
      "classes": [],
      "imports": [],
      "complexity": 0,
      "issues": []
    },
    {
      "path": "app/services/stripe_checkout_service.py",
      "lines": 292,
      "functions": [
        {
          "name": "initialize_stripe",
          "line": 18,
          "args": 1,
          "docstring": "Initialize Stripe with API key",
          "complexity": 1
        },
        {
          "name": "create_setup_intent_for_trial",
          "line": 23,
          "args": 2,
          "docstring": "Create a Stripe SetupIntent for trial payment method collection",
          "complexity": 5
        },
        {
          "name": "confirm_payment_method_setup",
          "line": 68,
          "args": 3,
          "docstring": "Confirm payment method setup and save to database",
          "complexity": 7
        },
        {
          "name": "create_checkout_session_for_subscription",
          "line": 157,
          "args": 4,
          "docstring": "Create Stripe Checkout session for subscription with trial",
          "complexity": 6
        },
        {
          "name": "handle_checkout_session_completed",
          "line": 223,
          "args": 2,
          "docstring": "Handle completed checkout session for trial subscription",
          "complexity": 9
        }
      ],
      "classes": [
        {
          "name": "StripeCheckoutService",
          "line": 14,
          "methods": 5,
          "docstring": "Service for handling Stripe checkout and payment method setup"
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "stripe",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "current_app",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "url_for",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 4
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "timedelta",
          "alias": null,
          "line": 4
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 5
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "app.models.user",
          "name": "User",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "app.models.billing",
          "name": "PaymentMethod",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "app.services.trial_membership_service",
          "name": "TrialMembershipService",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "app.models.subscription",
          "name": "SubscriptionPlan",
          "alias": null,
          "line": 163
        },
        {
          "type": "from_import",
          "module": "app.models.subscription",
          "name": "Subscription",
          "alias": null,
          "line": 240
        }
      ],
      "complexity": 28,
      "issues": [
        "Line 275: Line too long (129 chars)",
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/services/__init__.py",
      "lines": 136,
      "functions": [
        {
          "name": "get_message_handler",
          "line": 4,
          "args": 0,
          "docstring": "Lazy import message handler to avoid circular imports",
          "complexity": 1
        },
        {
          "name": "get_ai_service",
          "line": 23,
          "args": 0,
          "docstring": "Lazy import AI service to avoid circular imports",
          "complexity": 1
        },
        {
          "name": "get_billing_service",
          "line": 36,
          "args": 0,
          "docstring": "Lazy import billing service to avoid circular imports",
          "complexity": 1
        },
        {
          "name": "get_sms_service",
          "line": 79,
          "args": 0,
          "docstring": "Lazy import SMS service to avoid circular imports",
          "complexity": 1
        },
        {
          "name": "get_sms_service",
          "line": 108,
          "args": 0,
          "docstring": "Lazy import SMS service to avoid circular imports",
          "complexity": 1
        },
        {
          "name": "get_message_handler",
          "line": 64,
          "args": 0,
          "docstring": "Get message handler functions.",
          "complexity": 1
        },
        {
          "name": "get_ai_service",
          "line": 69,
          "args": 0,
          "docstring": "Get AI service functions.",
          "complexity": 1
        },
        {
          "name": "get_billing_service",
          "line": 74,
          "args": 0,
          "docstring": "Get billing service functions.",
          "complexity": 1
        },
        {
          "name": "get_sms_service",
          "line": 89,
          "args": 0,
          "docstring": "Get SMS service instance.",
          "complexity": 1
        },
        {
          "name": "get_message_handler",
          "line": 94,
          "args": 0,
          "docstring": "Get message handler functions.",
          "complexity": 1
        },
        {
          "name": "get_ai_service",
          "line": 99,
          "args": 0,
          "docstring": "Get AI service functions.",
          "complexity": 1
        },
        {
          "name": "get_billing_service",
          "line": 104,
          "args": 0,
          "docstring": "Get billing service functions.",
          "complexity": 1
        },
        {
          "name": "get_sms_service",
          "line": 118,
          "args": 0,
          "docstring": "Get SMS service instance.",
          "complexity": 1
        },
        {
          "name": "get_message_handler",
          "line": 123,
          "args": 0,
          "docstring": "Get message handler functions.",
          "complexity": 1
        },
        {
          "name": "get_ai_service",
          "line": 128,
          "args": 0,
          "docstring": "Get AI service functions.",
          "complexity": 1
        },
        {
          "name": "get_billing_service",
          "line": 133,
          "args": 0,
          "docstring": "Get billing service functions.",
          "complexity": 1
        }
      ],
      "classes": [
        {
          "name": "ServiceManager",
          "line": 59,
          "methods": 3,
          "docstring": "Manager class for all services."
        },
        {
          "name": "ServiceManager",
          "line": 85,
          "methods": 4,
          "docstring": "Manager class for all services."
        },
        {
          "name": "ServiceManager",
          "line": 114,
          "methods": 4,
          "docstring": "Manager class for all services."
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "app.services.message_handler",
          "name": "handle_incoming_message",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "app.services.message_handler",
          "name": "send_response",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "app.services.message_handler",
          "name": "check_flagged_content",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "app.services.message_handler",
          "name": "is_within_business_hours",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "app.services.message_handler",
          "name": "get_conversation_history",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "app.services.message_handler",
          "name": "format_outgoing_message",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "app.services.ai_service",
          "name": "generate_ai_response",
          "alias": null,
          "line": 25
        },
        {
          "type": "from_import",
          "module": "app.services.ai_service",
          "name": "get_conversation_history",
          "alias": null,
          "line": 25
        },
        {
          "type": "from_import",
          "module": "app.services.ai_service",
          "name": "create_system_prompt",
          "alias": null,
          "line": 25
        },
        {
          "type": "from_import",
          "module": "app.services.billing_service",
          "name": "initialize_stripe",
          "alias": null,
          "line": 38
        },
        {
          "type": "from_import",
          "module": "app.services.billing_service",
          "name": "create_subscription",
          "alias": null,
          "line": 38
        },
        {
          "type": "from_import",
          "module": "app.services.billing_service",
          "name": "update_subscription",
          "alias": null,
          "line": 38
        },
        {
          "type": "from_import",
          "module": "app.services.billing_service",
          "name": "cancel_subscription",
          "alias": null,
          "line": 38
        },
        {
          "type": "from_import",
          "module": "app.services.billing_service",
          "name": "check_subscription_status",
          "alias": null,
          "line": 38
        },
        {
          "type": "from_import",
          "module": "app.services.billing_service",
          "name": "create_checkout_session",
          "alias": null,
          "line": 38
        },
        {
          "type": "from_import",
          "module": "app.services.sms_service",
          "name": "sms_service",
          "alias": null,
          "line": 81
        },
        {
          "type": "from_import",
          "module": "app.services.sms_service",
          "name": "sms_service",
          "alias": null,
          "line": 110
        }
      ],
      "complexity": 16,
      "issues": []
    },
    {
      "path": "app/services/payment_processor.py",
      "lines": 500,
      "functions": [
        {
          "name": "initialize",
          "line": 24,
          "args": 0,
          "docstring": "Initialize Stripe with API key",
          "complexity": 1
        },
        {
          "name": "create_customer",
          "line": 29,
          "args": 4,
          "docstring": "Create a customer in Stripe",
          "complexity": 3
        },
        {
          "name": "create_payment_method",
          "line": 54,
          "args": 4,
          "docstring": "Create and attach payment method to customer",
          "complexity": 5
        },
        {
          "name": "process_payment",
          "line": 96,
          "args": 6,
          "docstring": "Process a one-time payment",
          "complexity": 9
        },
        {
          "name": "create_subscription",
          "line": 151,
          "args": 6,
          "docstring": "Create a subscription in Stripe",
          "complexity": 9
        },
        {
          "name": "update_subscription",
          "line": 206,
          "args": 5,
          "docstring": "Update a subscription",
          "complexity": 5
        },
        {
          "name": "cancel_subscription",
          "line": 244,
          "args": 3,
          "docstring": "Cancel a subscription",
          "complexity": 4
        },
        {
          "name": "create_billing_portal_session",
          "line": 271,
          "args": 3,
          "docstring": "Create a billing portal session",
          "complexity": 4
        },
        {
          "name": "refund_payment",
          "line": 295,
          "args": 4,
          "docstring": "Refund a payment",
          "complexity": 5
        },
        {
          "name": "handle_webhook_event",
          "line": 325,
          "args": 2,
          "docstring": "Handle Stripe webhook events",
          "complexity": 9
        },
        {
          "name": "_handle_subscription_created",
          "line": 353,
          "args": 2,
          "docstring": "Handle subscription creation webhook",
          "complexity": 4
        },
        {
          "name": "_handle_subscription_updated",
          "line": 380,
          "args": 2,
          "docstring": "Handle subscription update webhook",
          "complexity": 4
        },
        {
          "name": "_handle_payment_succeeded",
          "line": 409,
          "args": 2,
          "docstring": "Handle successful payment webhook",
          "complexity": 5
        },
        {
          "name": "_handle_payment_failed",
          "line": 446,
          "args": 2,
          "docstring": "Handle failed payment webhook",
          "complexity": 4
        },
        {
          "name": "_calculate_proration_amount",
          "line": 484,
          "args": 2,
          "docstring": "Calculate proration amount from subscription",
          "complexity": 3
        },
        {
          "name": "validate_webhook_signature",
          "line": 494,
          "args": 3,
          "docstring": "Validate Stripe webhook signature",
          "complexity": 2
        }
      ],
      "classes": [
        {
          "name": "PaymentProcessor",
          "line": 20,
          "methods": 16,
          "docstring": "Payment processor using Stripe as the backend"
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "stripe",
          "alias": null,
          "line": 7
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "timedelta",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "current_app",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "app.models.user",
          "name": "User",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "app.models.subscription",
          "name": "Subscription",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "app.models.payment",
          "name": "Payment",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "app.models.payment",
          "name": "PaymentMethod",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "app.models.invoice",
          "name": "Invoice",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "app.utils.billing_helpers",
          "name": "BillingHelpers",
          "alias": null,
          "line": 16
        }
      ],
      "complexity": 76,
      "issues": [
        "Line 474: TODO/FIXME comment found",
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/services/queue_service.py",
      "lines": 93,
      "functions": [
        {
          "name": "__init__",
          "line": 15,
          "args": 3,
          "docstring": "Initialize the queue with Redis connection and default queue name",
          "complexity": 1
        },
        {
          "name": "enqueue",
          "line": 20,
          "args": 2,
          "docstring": "Add a task to the queue\nfunc: function to execute (or function name as string)\nargs, kwargs: arguments to pass to the function\nqueue: optional queue name, defaults to self.default_queue",
          "complexity": 2
        },
        {
          "name": "process_queue",
          "line": 50,
          "args": 3,
          "docstring": "Process tasks in the queue\nqueue: optional queue name, defaults to self.default_queue\nlimit: optional maximum number of tasks to process",
          "complexity": 7
        }
      ],
      "classes": [
        {
          "name": "RedisQueue",
          "line": 10,
          "methods": 3,
          "docstring": "Redis-based queue service for handling asynchronous tasks"
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "redis",
          "alias": null,
          "line": 2
        },
        {
          "type": "import",
          "module": "json",
          "alias": null,
          "line": 3
        },
        {
          "type": "import",
          "module": "uuid",
          "alias": null,
          "line": 4
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "current_app",
          "alias": null,
          "line": 5
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 6
        }
      ],
      "complexity": 10,
      "issues": [
        "Line 77: Line too long (134 chars)"
      ]
    },
    {
      "path": "app/services/message_handler.py",
      "lines": 490,
      "functions": [
        {
          "name": "process_incoming_message",
          "line": 14,
          "args": 4,
          "docstring": "Process incoming message and generate appropriate response\nUPDATED: Works with User model instead of Profile",
          "complexity": 5
        },
        {
          "name": "should_respond_to_message",
          "line": 44,
          "args": 3,
          "docstring": "Determine if we should auto-respond to this message\nUPDATED: Uses User model settings",
          "complexity": 9
        },
        {
          "name": "is_within_business_hours",
          "line": 79,
          "args": 1,
          "docstring": "Check if current time is within user's business hours\nUPDATED: Uses User model business_hours",
          "complexity": 8
        },
        {
          "name": "generate_response",
          "line": 127,
          "args": 3,
          "docstring": "Generate appropriate response based on user settings\nUPDATED: Uses User model auto-reply settings and AI configuration",
          "complexity": 9
        },
        {
          "name": "generate_ai_response",
          "line": 163,
          "args": 3,
          "docstring": "Generate AI response using user's AI settings\nUPDATED: Uses User model AI configuration",
          "complexity": 4
        },
        {
          "name": "generate_contextual_response",
          "line": 199,
          "args": 2,
          "docstring": "Generate a contextual response (placeholder for actual AI implementation)",
          "complexity": 5
        },
        {
          "name": "get_default_out_of_office_message",
          "line": 245,
          "args": 1,
          "docstring": "Get default out of office message",
          "complexity": 2
        },
        {
          "name": "get_default_response",
          "line": 251,
          "args": 1,
          "docstring": "Get default fallback response",
          "complexity": 2
        },
        {
          "name": "send_response",
          "line": 256,
          "args": 4,
          "docstring": "Send response via SignalWire and save to database\nUPDATED: Uses User model SignalWire configuration",
          "complexity": 3
        },
        {
          "name": "is_inappropriate_content",
          "line": 325,
          "args": 1,
          "docstring": "Check if message contains inappropriate content",
          "complexity": 5
        },
        {
          "name": "flag_inappropriate_message",
          "line": 354,
          "args": 4,
          "docstring": "Flag inappropriate message for review\nUPDATED: Uses user_id instead of profile_id",
          "complexity": 5
        },
        {
          "name": "analyze_message_sentiment",
          "line": 398,
          "args": 1,
          "docstring": "Analyze message sentiment (placeholder for actual implementation)",
          "complexity": 3
        },
        {
          "name": "extract_intent",
          "line": 419,
          "args": 1,
          "docstring": "Extract intent from message (placeholder for actual implementation)",
          "complexity": 5
        },
        {
          "name": "get_response_suggestions",
          "line": 438,
          "args": 3,
          "docstring": "Get suggested responses for manual review\nUPDATED: Uses User model for context",
          "complexity": 5
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "from_import",
          "module": "app.models.user",
          "name": "User",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "app.models.client",
          "name": "Client",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "app.models.message",
          "name": "Message",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "app.models.message",
          "name": "FlaggedMessage",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 4
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 5
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 6
        },
        {
          "type": "import",
          "module": "re",
          "alias": null,
          "line": 7
        },
        {
          "type": "import",
          "module": "random",
          "alias": null,
          "line": 241
        },
        {
          "type": "import",
          "module": "pytz",
          "alias": null,
          "line": 85
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 86
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "time",
          "alias": null,
          "line": 86
        }
      ],
      "complexity": 70,
      "issues": [
        "Line 188: TODO/FIXME comment found",
        "Line 285: TODO/FIXME comment found",
        "Line 310: TODO/FIXME comment found",
        "Line 400: TODO/FIXME comment found",
        "Line 421: TODO/FIXME comment found",
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/services/signalwire_service.py",
      "lines": 351,
      "functions": [
        {
          "name": "__init__",
          "line": 17,
          "args": 1,
          "docstring": null,
          "complexity": 3
        },
        {
          "name": "search_available_numbers",
          "line": 44,
          "args": 5,
          "docstring": "Search for available phone numbers in Ontario, Canada\n\nArgs:\n    country: Country code (CA for Canada)\n    area_code: Specific area code to search\n    locality: City/locality to search in\n    limit: Maximum number of results to return\n    \nReturns:\n    Dict containing available numbers and selection token",
          "complexity": 17
        },
        {
          "name": "create_subproject_and_purchase_number",
          "line": 177,
          "args": 5,
          "docstring": "Create SignalWire subproject and purchase selected phone number\n\nArgs:\n    user_id: Database user ID\n    username: User's username\n    selected_number: Phone number to purchase\n    selection_token: Token from number search\n    \nReturns:\n    Dict containing subproject details and phone number info",
          "complexity": 6
        },
        {
          "name": "test_webhook_configuration",
          "line": 269,
          "args": 3,
          "docstring": "Test webhook configuration by sending a test message",
          "complexity": 2
        },
        {
          "name": "get_subproject_usage",
          "line": 293,
          "args": 2,
          "docstring": "Get usage statistics for a subproject",
          "complexity": 2
        },
        {
          "name": "_create_selection_token",
          "line": 319,
          "args": 2,
          "docstring": "Create a secure token for number selection with Redis caching",
          "complexity": 3
        },
        {
          "name": "_validate_selection_token",
          "line": 339,
          "args": 2,
          "docstring": "Validate selection token and return cached numbers",
          "complexity": 4
        }
      ],
      "classes": [
        {
          "name": "SignalWireService",
          "line": 14,
          "methods": 7,
          "docstring": "SignalWire integration service for phone number management and subproject creation"
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "os",
          "alias": null,
          "line": 2
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 4
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "timedelta",
          "alias": null,
          "line": 4
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 5
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 5
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 5
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Tuple",
          "alias": null,
          "line": 5
        },
        {
          "type": "from_import",
          "module": "signalwire.rest",
          "name": "Client",
          "alias": "SignalWireClient",
          "line": 6
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "current_app",
          "alias": null,
          "line": 7
        },
        {
          "type": "import",
          "module": "redis",
          "alias": null,
          "line": 8
        },
        {
          "type": "import",
          "module": "json",
          "alias": null,
          "line": 9
        },
        {
          "type": "import",
          "module": "uuid",
          "alias": null,
          "line": 10
        }
      ],
      "complexity": 37,
      "issues": [
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/services/notification_service.py",
      "lines": 413,
      "functions": [
        {
          "name": "schedule_billing_notifications",
          "line": 384,
          "args": 0,
          "docstring": "Celery task to send scheduled billing notifications",
          "complexity": 2
        },
        {
          "name": "init_notification_commands",
          "line": 400,
          "args": 1,
          "docstring": "Initialize CLI commands for notifications",
          "complexity": 1
        },
        {
          "name": "send_invoice_notification",
          "line": 25,
          "args": 4,
          "docstring": "Send invoice-related notifications",
          "complexity": 7
        },
        {
          "name": "send_payment_notification",
          "line": 86,
          "args": 4,
          "docstring": "Send payment-related notifications",
          "complexity": 7
        },
        {
          "name": "send_subscription_notification",
          "line": 152,
          "args": 4,
          "docstring": "Send subscription-related notifications",
          "complexity": 7
        },
        {
          "name": "send_usage_alert",
          "line": 219,
          "args": 4,
          "docstring": "Send usage alert notifications",
          "complexity": 6
        },
        {
          "name": "send_trial_notifications",
          "line": 286,
          "args": 1,
          "docstring": "Send trial ending notifications (called by cron job)",
          "complexity": 4
        },
        {
          "name": "send_overdue_invoice_notifications",
          "line": 326,
          "args": 1,
          "docstring": "Send overdue invoice notifications (called by cron job)",
          "complexity": 4
        },
        {
          "name": "_send_email",
          "line": 363,
          "args": 5,
          "docstring": "Send email using Flask-Mail",
          "complexity": 2
        },
        {
          "name": "send_trial_notifications_command",
          "line": 404,
          "args": 0,
          "docstring": "Send trial ending notifications",
          "complexity": 1
        },
        {
          "name": "send_overdue_notifications_command",
          "line": 410,
          "args": 0,
          "docstring": "Send overdue invoice notifications",
          "complexity": 1
        }
      ],
      "classes": [
        {
          "name": "NotificationService",
          "line": 21,
          "methods": 7,
          "docstring": "Service for handling billing and usage notifications"
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "current_app",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "render_template",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "url_for",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "flask_mail",
          "name": "Message",
          "alias": "EmailMessage",
          "line": 11
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "mail",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "app.models.user",
          "name": "User",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "app.models.invoice",
          "name": "Invoice",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "app.models.subscription",
          "name": "Subscription",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "app.models.billing_settings",
          "name": "BillingSettings",
          "alias": null,
          "line": 17
        },
        {
          "type": "from_import",
          "module": "app.models.payment",
          "name": "Payment",
          "alias": null,
          "line": 101
        }
      ],
      "complexity": 42,
      "issues": [
        "Line 407: print() statement (use logging instead)",
        "Line 413: print() statement (use logging instead)"
      ]
    },
    {
      "path": "app/services/signalwire_subaccount_service.py",
      "lines": 320,
      "functions": [
        {
          "name": "__init__",
          "line": 17,
          "args": 1,
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "_generate_selection_token",
          "line": 309,
          "args": 1,
          "docstring": "Generate secure selection token",
          "complexity": 1
        },
        {
          "name": "cleanup_expired_sessions",
          "line": 314,
          "args": 0,
          "docstring": "Clean up expired selection sessions (run as background task)",
          "complexity": 1
        }
      ],
      "classes": [
        {
          "name": "SignalWireSubAccountService",
          "line": 14,
          "methods": 3,
          "docstring": "Enhanced SignalWire sub-account management"
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "asyncio",
          "alias": null,
          "line": 1
        },
        {
          "type": "import",
          "module": "json",
          "alias": null,
          "line": 2
        },
        {
          "type": "import",
          "module": "secrets",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 4
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "timedelta",
          "alias": null,
          "line": 4
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 5
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 5
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 5
        },
        {
          "type": "import",
          "module": "aiohttp",
          "alias": null,
          "line": 7
        },
        {
          "type": "import",
          "module": "asyncpg",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "current_app",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "app.models.user",
          "name": "User",
          "alias": null,
          "line": 12
        }
      ],
      "complexity": 3,
      "issues": [
        "Line 148: Line too long (126 chars)",
        "Line 257: Line too long (131 chars)",
        "Line 297: Line too long (136 chars)",
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/services/trial_membership_service.py",
      "lines": 337,
      "functions": [
        {
          "name": "get_trial_status",
          "line": 23,
          "args": 2,
          "docstring": "Get comprehensive trial status for a user",
          "complexity": 3
        },
        {
          "name": "create_trial_notification",
          "line": 64,
          "args": 7,
          "docstring": "Create a trial notification for the user",
          "complexity": 2
        },
        {
          "name": "validate_payment_method_for_trial",
          "line": 89,
          "args": 3,
          "docstring": "Validate that user has a payment method before starting trial",
          "complexity": 7
        },
        {
          "name": "start_trial_with_subscription",
          "line": 142,
          "args": 3,
          "docstring": "Start trial by creating subscription with trial period",
          "complexity": 7
        },
        {
          "name": "setup_signalwire_number",
          "line": 228,
          "args": 3,
          "docstring": "Set up SignalWire number for trial user",
          "complexity": 6
        },
        {
          "name": "_is_trial_active",
          "line": 298,
          "args": 2,
          "docstring": "Check if user has an active trial",
          "complexity": 3
        },
        {
          "name": "_can_start_trial",
          "line": 305,
          "args": 4,
          "docstring": "Determine if user can start a trial",
          "complexity": 4
        },
        {
          "name": "_get_trial_notifications",
          "line": 320,
          "args": 2,
          "docstring": "Get active trial notifications for user",
          "complexity": 1
        }
      ],
      "classes": [
        {
          "name": "TrialMembershipService",
          "line": 17,
          "methods": 8,
          "docstring": "Service for managing 14-day trial memberships with SignalWire integration"
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "flask",
          "name": "current_app",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "timedelta",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 4
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 4
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 4
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 4
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 5
        },
        {
          "type": "import",
          "module": "stripe",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "app.models.user",
          "name": "User",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "app.models.subscription",
          "name": "Subscription",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "app.models.subscription",
          "name": "SubscriptionPlan",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "app.models.billing",
          "name": "PaymentMethod",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "app.services.signalwire_service",
          "name": "SignalWireService",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "app.services.payment_processor",
          "name": "PaymentProcessor",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "app.models.trial_notification",
          "name": "TrialNotification",
          "alias": null,
          "line": 68
        },
        {
          "type": "from_import",
          "module": "app.models.trial_notification",
          "name": "TrialNotification",
          "alias": null,
          "line": 322
        }
      ],
      "complexity": 33,
      "issues": [
        "Line 113: Line too long (166 chars)",
        "Line 209: Line too long (135 chars)",
        "Line 278: Line too long (123 chars)",
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/services/billing_service.py",
      "lines": 256,
      "functions": [
        {
          "name": "initialize_stripe",
          "line": 10,
          "args": 0,
          "docstring": "Configure Stripe with API key",
          "complexity": 1
        },
        {
          "name": "create_subscription",
          "line": 14,
          "args": 3,
          "docstring": "Create a new subscription for a user",
          "complexity": 6
        },
        {
          "name": "update_subscription",
          "line": 111,
          "args": 2,
          "docstring": "Update a subscription to a new plan",
          "complexity": 5
        },
        {
          "name": "cancel_subscription",
          "line": 156,
          "args": 1,
          "docstring": "Cancel a subscription",
          "complexity": 3
        },
        {
          "name": "check_subscription_status",
          "line": 183,
          "args": 1,
          "docstring": "Check current status of a subscription with Stripe",
          "complexity": 5
        },
        {
          "name": "create_checkout_session",
          "line": 210,
          "args": 4,
          "docstring": "Create a Stripe checkout session for a subscription",
          "complexity": 5
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "import",
          "module": "stripe",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "current_app",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "timedelta",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 4
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 5
        },
        {
          "type": "import",
          "module": "json",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "app.models.user",
          "name": "User",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "app.models.billing",
          "name": "SubscriptionPlan",
          "alias": null,
          "line": 17
        },
        {
          "type": "from_import",
          "module": "app.models.billing",
          "name": "Subscription",
          "alias": null,
          "line": 17
        },
        {
          "type": "from_import",
          "module": "app.models.billing",
          "name": "Invoice",
          "alias": null,
          "line": 17
        },
        {
          "type": "from_import",
          "module": "app.models.payment",
          "name": "PaymentMethod",
          "alias": null,
          "line": 18
        },
        {
          "type": "from_import",
          "module": "app.models.subscription_payment_method",
          "name": "SubscriptionPaymentMethod",
          "alias": null,
          "line": 19
        },
        {
          "type": "from_import",
          "module": "app.models.billing",
          "name": "Subscription",
          "alias": null,
          "line": 113
        },
        {
          "type": "from_import",
          "module": "app.models.billing",
          "name": "SubscriptionPlan",
          "alias": null,
          "line": 113
        },
        {
          "type": "from_import",
          "module": "app.models.billing",
          "name": "Subscription",
          "alias": null,
          "line": 158
        },
        {
          "type": "from_import",
          "module": "app.models.billing",
          "name": "Subscription",
          "alias": null,
          "line": 185
        },
        {
          "type": "from_import",
          "module": "app.models.user",
          "name": "User",
          "alias": null,
          "line": 212
        },
        {
          "type": "from_import",
          "module": "app.models.billing",
          "name": "SubscriptionPlan",
          "alias": null,
          "line": 213
        }
      ],
      "complexity": 25,
      "issues": [
        "Line 200: Line too long (188 chars)",
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/services/invoice_generator.py",
      "lines": 486,
      "functions": [
        {
          "name": "create_subscription_invoice",
          "line": 39,
          "args": 4,
          "docstring": "Create invoice for subscription billing period",
          "complexity": 5
        },
        {
          "name": "create_usage_invoice",
          "line": 136,
          "args": 3,
          "docstring": "Create invoice for usage-based charges",
          "complexity": 6
        },
        {
          "name": "generate_pdf",
          "line": 220,
          "args": 2,
          "docstring": "Generate PDF for invoice",
          "complexity": 11
        },
        {
          "name": "get_pdf",
          "line": 374,
          "args": 2,
          "docstring": "Retrieve PDF data from storage",
          "complexity": 3
        },
        {
          "name": "mark_invoice_paid",
          "line": 392,
          "args": 3,
          "docstring": "Mark invoice as paid",
          "complexity": 5
        },
        {
          "name": "_generate_invoice_number",
          "line": 429,
          "args": 1,
          "docstring": "Generate unique invoice number",
          "complexity": 1
        },
        {
          "name": "_calculate_tax",
          "line": 441,
          "args": 3,
          "docstring": "Calculate tax amount based on user location and tax rules",
          "complexity": 4
        },
        {
          "name": "_save_pdf_to_storage",
          "line": 467,
          "args": 3,
          "docstring": "Save PDF to storage and return path/URL",
          "complexity": 2
        }
      ],
      "classes": [
        {
          "name": "InvoiceGenerator",
          "line": 35,
          "methods": 8,
          "docstring": "Service for generating and managing invoices"
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "os",
          "alias": null,
          "line": 7
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "timedelta",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "io",
          "name": "BytesIO",
          "alias": null,
          "line": 11
        },
        {
          "type": "import",
          "module": "uuid",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "reportlab.lib.pagesizes",
          "name": "letter",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "reportlab.lib.pagesizes",
          "name": "A4",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "reportlab.lib.styles",
          "name": "getSampleStyleSheet",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "reportlab.lib.styles",
          "name": "ParagraphStyle",
          "alias": null,
          "line": 16
        },
        {
          "type": "from_import",
          "module": "reportlab.lib.units",
          "name": "inch",
          "alias": null,
          "line": 17
        },
        {
          "type": "from_import",
          "module": "reportlab.platypus",
          "name": "SimpleDocTemplate",
          "alias": null,
          "line": 18
        },
        {
          "type": "from_import",
          "module": "reportlab.platypus",
          "name": "Paragraph",
          "alias": null,
          "line": 18
        },
        {
          "type": "from_import",
          "module": "reportlab.platypus",
          "name": "Spacer",
          "alias": null,
          "line": 18
        },
        {
          "type": "from_import",
          "module": "reportlab.platypus",
          "name": "Table",
          "alias": null,
          "line": 18
        },
        {
          "type": "from_import",
          "module": "reportlab.platypus",
          "name": "TableStyle",
          "alias": null,
          "line": 18
        },
        {
          "type": "from_import",
          "module": "reportlab.platypus",
          "name": "Image",
          "alias": null,
          "line": 18
        },
        {
          "type": "from_import",
          "module": "reportlab.lib",
          "name": "colors",
          "alias": null,
          "line": 19
        },
        {
          "type": "from_import",
          "module": "reportlab.lib.enums",
          "name": "TA_LEFT",
          "alias": null,
          "line": 20
        },
        {
          "type": "from_import",
          "module": "reportlab.lib.enums",
          "name": "TA_RIGHT",
          "alias": null,
          "line": 20
        },
        {
          "type": "from_import",
          "module": "reportlab.lib.enums",
          "name": "TA_CENTER",
          "alias": null,
          "line": 20
        },
        {
          "type": "from_import",
          "module": "flask_mail",
          "name": "Message",
          "alias": "EmailMessage",
          "line": 23
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "current_app",
          "alias": null,
          "line": 24
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "render_template",
          "alias": null,
          "line": 24
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 26
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "mail",
          "alias": null,
          "line": 26
        },
        {
          "type": "from_import",
          "module": "app.models.invoice",
          "name": "Invoice",
          "alias": null,
          "line": 27
        },
        {
          "type": "from_import",
          "module": "app.models.invoice",
          "name": "InvoiceLineItem",
          "alias": null,
          "line": 27
        },
        {
          "type": "from_import",
          "module": "app.models.subscription",
          "name": "Subscription",
          "alias": null,
          "line": 28
        },
        {
          "type": "from_import",
          "module": "app.models.user",
          "name": "User",
          "alias": null,
          "line": 29
        },
        {
          "type": "from_import",
          "module": "app.models.payment",
          "name": "Payment",
          "alias": null,
          "line": 30
        },
        {
          "type": "from_import",
          "module": "app.services.notification_service",
          "name": "NotificationService",
          "alias": null,
          "line": 31
        }
      ],
      "complexity": 37,
      "issues": [
        "Line 70: Line too long (161 chars)",
        "Line 284: Line too long (121 chars)",
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/services/usage_tracker.py",
      "lines": 575,
      "functions": [
        {
          "name": "initialize_usage_for_subscription",
          "line": 23,
          "args": 2,
          "docstring": "Initialize usage tracking for a new subscription",
          "complexity": 3
        },
        {
          "name": "track_sms_sent",
          "line": 63,
          "args": 4,
          "docstring": "Track SMS sent usage",
          "complexity": 6
        },
        {
          "name": "track_sms_received",
          "line": 119,
          "args": 3,
          "docstring": "Track SMS received (usually doesn't count against limits)",
          "complexity": 4
        },
        {
          "name": "track_ai_response_generated",
          "line": 144,
          "args": 5,
          "docstring": "Track AI response generation",
          "complexity": 6
        },
        {
          "name": "track_storage_usage",
          "line": 197,
          "args": 3,
          "docstring": "Track storage usage",
          "complexity": 6
        },
        {
          "name": "track_api_call",
          "line": 241,
          "args": 4,
          "docstring": "Track API call usage",
          "complexity": 6
        },
        {
          "name": "update_active_profiles_count",
          "line": 280,
          "args": 2,
          "docstring": "Update count of active profiles",
          "complexity": 5
        },
        {
          "name": "get_usage_history",
          "line": 320,
          "args": 5,
          "docstring": "Get usage history for analytics",
          "complexity": 12
        },
        {
          "name": "reset_usage_for_new_period",
          "line": 373,
          "args": 2,
          "docstring": "Reset usage tracking for a new billing period",
          "complexity": 3
        },
        {
          "name": "_get_active_subscription",
          "line": 412,
          "args": 2,
          "docstring": "Get user's active subscription",
          "complexity": 1
        },
        {
          "name": "_get_current_usage",
          "line": 420,
          "args": 2,
          "docstring": "Get current usage record for subscription",
          "complexity": 1
        },
        {
          "name": "_calculate_sms_credits",
          "line": 429,
          "args": 2,
          "docstring": "Calculate SMS credits needed based on message content",
          "complexity": 1
        },
        {
          "name": "_calculate_ai_credits",
          "line": 437,
          "args": 3,
          "docstring": "Calculate AI credits needed based on token usage",
          "complexity": 1
        },
        {
          "name": "_are_overages_allowed",
          "line": 445,
          "args": 2,
          "docstring": "Check if overages are allowed for this subscription",
          "complexity": 1
        },
        {
          "name": "_calculate_overage_cost",
          "line": 452,
          "args": 3,
          "docstring": "Calculate cost for overage usage",
          "complexity": 1
        },
        {
          "name": "_create_overage_record",
          "line": 466,
          "args": 5,
          "docstring": "Create overage record",
          "complexity": 1
        },
        {
          "name": "_check_usage_alerts",
          "line": 479,
          "args": 3,
          "docstring": "Check if usage alerts should be sent",
          "complexity": 10
        },
        {
          "name": "_send_usage_notification",
          "line": 522,
          "args": 4,
          "docstring": "Send usage notification to user",
          "complexity": 2
        },
        {
          "name": "__init__",
          "line": 535,
          "args": 2,
          "docstring": null,
          "complexity": 2
        },
        {
          "name": "init_app",
          "line": 540,
          "args": 2,
          "docstring": "Initialize the middleware with Flask app",
          "complexity": 1
        },
        {
          "name": "before_request",
          "line": 545,
          "args": 1,
          "docstring": "Track API calls before request processing",
          "complexity": 7
        },
        {
          "name": "after_request",
          "line": 572,
          "args": 2,
          "docstring": "Track successful operations after request",
          "complexity": 1
        }
      ],
      "classes": [
        {
          "name": "UsageTracker",
          "line": 19,
          "methods": 18,
          "docstring": "Service for tracking and managing subscription usage"
        },
        {
          "name": "UsageTrackingMiddleware",
          "line": 532,
          "methods": 4,
          "docstring": "Middleware to automatically track certain usage events"
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 5
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "timedelta",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "sqlalchemy",
          "name": "func",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "sqlalchemy",
          "name": "and_",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "sqlalchemy",
          "name": "or_",
          "alias": null,
          "line": 8
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "app.models.subscription",
          "name": "Subscription",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "app.models.usage",
          "name": "Usage",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "app.models.usage",
          "name": "UsageOverage",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "app.models.message",
          "name": "Message",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "app.models.profile",
          "name": "Profile",
          "alias": null,
          "line": 13
        },
        {
          "type": "from_import",
          "module": "app.models.billing_settings",
          "name": "BillingSettings",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "app.services.notification_service",
          "name": "NotificationService",
          "alias": null,
          "line": 15
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "request",
          "alias": null,
          "line": 547
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "g",
          "alias": null,
          "line": 547
        },
        {
          "type": "from_import",
          "module": "flask_jwt_extended",
          "name": "get_jwt_identity",
          "alias": null,
          "line": 552
        },
        {
          "type": "from_import",
          "module": "flask_jwt_extended",
          "name": "verify_jwt_in_request",
          "alias": null,
          "line": 552
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "jsonify",
          "alias": null,
          "line": 565
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "abort",
          "alias": null,
          "line": 565
        }
      ],
      "complexity": 81,
      "issues": [
        "Line 83: Line too long (123 chars)",
        "Line 84: Line too long (131 chars)",
        "Line 144: Line too long (132 chars)",
        "Line 162: Line too long (121 chars)",
        "Line 163: Line too long (129 chars)",
        "Line 320: Line too long (135 chars)",
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/services/llm_service.py",
      "lines": 229,
      "functions": [
        {
          "name": "__init__",
          "line": 13,
          "args": 1,
          "docstring": "Initialize LLM service with configuration.",
          "complexity": 1
        },
        {
          "name": "generate_response",
          "line": 20,
          "args": 5,
          "docstring": null,
          "complexity": 5
        },
        {
          "name": "_create_prompt",
          "line": 62,
          "args": 5,
          "docstring": "Create a properly formatted prompt for the LLM.",
          "complexity": 9
        },
        {
          "name": "_format_llm_request",
          "line": 120,
          "args": 2,
          "docstring": "Format the request for your specific LLM server.",
          "complexity": 1
        },
        {
          "name": "_extract_response_text",
          "line": 134,
          "args": 2,
          "docstring": "Extract the generated text from LLM response.",
          "complexity": 4
        },
        {
          "name": "_post_process_response",
          "line": 147,
          "args": 3,
          "docstring": "Post-process the LLM response for quality and safety.",
          "complexity": 5
        },
        {
          "name": "_sanitize_response",
          "line": 170,
          "args": 2,
          "docstring": "Remove or flag any inappropriate content from the response.",
          "complexity": 3
        },
        {
          "name": "_format_llm_request",
          "line": 193,
          "args": 2,
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "generate_response",
          "line": 205,
          "args": 5,
          "docstring": null,
          "complexity": 3
        }
      ],
      "classes": [
        {
          "name": "LLMService",
          "line": 10,
          "methods": 7,
          "docstring": "Service for interacting with your local LLM server."
        },
        {
          "name": "OpenAICompatibleLLMService",
          "line": 190,
          "methods": 2,
          "docstring": "For LLM servers that use OpenAI-compatible API."
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "requests",
          "alias": null,
          "line": 1
        },
        {
          "type": "import",
          "module": "json",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "current_app",
          "alias": null,
          "line": 4
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 5
        },
        {
          "type": "from_import",
          "module": "app.models.client",
          "name": "Client",
          "alias": null,
          "line": 65
        },
        {
          "type": "from_import",
          "module": "app.models.text_example",
          "name": "TextExample",
          "alias": null,
          "line": 66
        },
        {
          "type": "import",
          "module": "re",
          "alias": null,
          "line": 180
        }
      ],
      "complexity": 32,
      "issues": [
        "Line 79: Line too long (157 chars)"
      ]
    },
    {
      "path": "app/services/ai_service.py",
      "lines": 309,
      "functions": [
        {
          "name": "__init__",
          "line": 14,
          "args": 1,
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "generate_response",
          "line": 21,
          "args": 4,
          "docstring": "Generate AI response for incoming message\n\nArgs:\n    user: User object with AI settings\n    incoming_message: The incoming message text\n    conversation_history: Previous messages in conversation\n    \nReturns:\n    Dict with response, confidence, and metadata",
          "complexity": 2
        },
        {
          "name": "_build_conversation_context",
          "line": 72,
          "args": 4,
          "docstring": "Build context for AI conversation",
          "complexity": 2
        },
        {
          "name": "_build_ai_prompt",
          "line": 88,
          "args": 3,
          "docstring": "Build AI prompt for response generation",
          "complexity": 5
        },
        {
          "name": "_call_llm_server",
          "line": 143,
          "args": 3,
          "docstring": "Call the local LLM server",
          "complexity": 6
        },
        {
          "name": "_process_ai_response",
          "line": 196,
          "args": 3,
          "docstring": "Process and validate AI response",
          "complexity": 7
        },
        {
          "name": "_calculate_response_confidence",
          "line": 229,
          "args": 3,
          "docstring": "Calculate confidence score for AI response",
          "complexity": 5
        },
        {
          "name": "_get_fallback_response",
          "line": 251,
          "args": 2,
          "docstring": "Get fallback response when AI fails",
          "complexity": 1
        },
        {
          "name": "_is_business_hours",
          "line": 263,
          "args": 2,
          "docstring": "Check if current time is within business hours",
          "complexity": 4
        },
        {
          "name": "analyze_message_intent",
          "line": 287,
          "args": 2,
          "docstring": "Analyze message intent for better response routing",
          "complexity": 3
        }
      ],
      "classes": [
        {
          "name": "AIService",
          "line": 11,
          "methods": 10,
          "docstring": "AI service for generating SMS responses using local LLM"
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "os",
          "alias": null,
          "line": 1
        },
        {
          "type": "import",
          "module": "json",
          "alias": null,
          "line": 2
        },
        {
          "type": "import",
          "module": "time",
          "alias": null,
          "line": 3
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 4
        },
        {
          "type": "import",
          "module": "requests",
          "alias": null,
          "line": 5
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Tuple",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "timedelta",
          "alias": null,
          "line": 7
        },
        {
          "type": "import",
          "module": "random",
          "alias": null,
          "line": 260
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 275
        }
      ],
      "complexity": 36,
      "issues": [
        "Line 116: Line too long (132 chars)",
        "Line 118: Line too long (131 chars)",
        "Line 160: Line too long (133 chars)"
      ]
    },
    {
      "path": "app/services/sms_service.py",
      "lines": 272,
      "functions": [
        {
          "name": "send_sms",
          "line": 249,
          "args": 3,
          "docstring": "Backward compatible function",
          "complexity": 1
        },
        {
          "name": "validate_signalwire_webhook",
          "line": 253,
          "args": 1,
          "docstring": "Backward compatible function",
          "complexity": 1
        },
        {
          "name": "get_signalwire_phone_numbers",
          "line": 257,
          "args": 0,
          "docstring": "Backward compatible function",
          "complexity": 1
        },
        {
          "name": "get_available_phone_numbers",
          "line": 261,
          "args": 1,
          "docstring": "Backward compatible function",
          "complexity": 1
        },
        {
          "name": "purchase_phone_number",
          "line": 265,
          "args": 2,
          "docstring": "Backward compatible function",
          "complexity": 1
        },
        {
          "name": "configure_number_webhook",
          "line": 269,
          "args": 2,
          "docstring": "Backward compatible function",
          "complexity": 1
        },
        {
          "name": "__init__",
          "line": 19,
          "args": 1,
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "client",
          "line": 24,
          "args": 1,
          "docstring": "Lazy load SignalWire client",
          "complexity": 2
        },
        {
          "name": "_get_signalwire_client",
          "line": 30,
          "args": 1,
          "docstring": "Initialize SignalWire client",
          "complexity": 3
        },
        {
          "name": "send_message",
          "line": 53,
          "args": 4,
          "docstring": "Send SMS message via SignalWire\n\nReturns:\n    Tuple of (success, message_sid_or_error, message_data)",
          "complexity": 3
        },
        {
          "name": "validate_webhook",
          "line": 88,
          "args": 2,
          "docstring": "Validate SignalWire webhook signature",
          "complexity": 7
        },
        {
          "name": "get_phone_numbers",
          "line": 134,
          "args": 1,
          "docstring": "Get list of SignalWire phone numbers",
          "complexity": 4
        },
        {
          "name": "search_available_numbers",
          "line": 164,
          "args": 3,
          "docstring": "Search for available phone numbers",
          "complexity": 6
        },
        {
          "name": "purchase_phone_number",
          "line": 197,
          "args": 3,
          "docstring": "Purchase a phone number and configure webhooks",
          "complexity": 7
        },
        {
          "name": "configure_webhooks",
          "line": 223,
          "args": 3,
          "docstring": "Configure webhooks for an existing phone number",
          "complexity": 3
        }
      ],
      "classes": [
        {
          "name": "SMSService",
          "line": 16,
          "methods": 9,
          "docstring": "Unified SMS service for all provider operations"
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "os",
          "alias": null,
          "line": 5
        },
        {
          "type": "import",
          "module": "logging",
          "alias": null,
          "line": 6
        },
        {
          "type": "import",
          "module": "hmac",
          "alias": null,
          "line": 7
        },
        {
          "type": "import",
          "module": "hashlib",
          "alias": null,
          "line": 8
        },
        {
          "type": "import",
          "module": "base64",
          "alias": null,
          "line": 9
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Tuple",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "alias": null,
          "line": 10
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "current_app",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "request",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 12
        },
        {
          "type": "from_import",
          "module": "signalwire.rest",
          "name": "Client",
          "alias": "SignalWireClient",
          "line": 33
        }
      ],
      "complexity": 42,
      "issues": [
        "Potential SQL injection risk with string formatting"
      ]
    },
    {
      "path": "app/services/subscription_service.py",
      "lines": 42,
      "functions": [
        {
          "name": "create_subscription_with_signalwire",
          "line": 27,
          "args": 2,
          "docstring": "Create subscription and set up SignalWire integration",
          "complexity": 3
        }
      ],
      "classes": [
        {
          "name": "SubscriptionService",
          "line": 23,
          "methods": 1,
          "docstring": "Service for managing subscriptions with SignalWire integration"
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "app.models.billing",
          "name": "Subscription",
          "alias": null,
          "line": 1
        },
        {
          "type": "from_import",
          "module": "app.models.signalwire_account",
          "name": "SignalWireAccount",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "app.models.signalwire_account",
          "name": "SignalWirePhoneNumber",
          "alias": null,
          "line": 2
        },
        {
          "type": "from_import",
          "module": "app.models.user",
          "name": "User",
          "alias": null,
          "line": 3
        },
        {
          "type": "from_import",
          "module": "app.extensions",
          "name": "db",
          "alias": null,
          "line": 4
        },
        {
          "type": "from_import",
          "module": "flask",
          "name": "current_app",
          "alias": null,
          "line": 5
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "alias": null,
          "line": 6
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "timedelta",
          "alias": null,
          "line": 6
        },
        {
          "type": "import",
          "module": "secrets",
          "alias": null,
          "line": 7
        },
        {
          "type": "from_import",
          "module": "app.services.sms_service",
          "name": "SMSService",
          "alias": null,
          "line": 11
        },
        {
          "type": "from_import",
          "module": "app.services.sms_service",
          "name": "get_signalwire_client",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "app.services.sms_service",
          "name": "send_sms",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "app.services.sms_service",
          "name": "get_signalwire_phone_numbers",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "app.services.sms_service",
          "name": "get_available_phone_numbers",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "app.services.sms_service",
          "name": "purchase_phone_number",
          "alias": null,
          "line": 14
        },
        {
          "type": "from_import",
          "module": "app.services.sms_service",
          "name": "configure_number_webhook",
          "alias": null,
          "line": 14
        }
      ],
      "complexity": 3,
      "issues": []
    }
  ],
  "duplicate_functions": {
    "register_blueprints_1": [
      {
        "file": "app/__init__.py",
        "function": {
          "name": "register_blueprints",
          "line": 135,
          "args": 1,
          "docstring": "Register application blueprints",
          "complexity": 10
        }
      },
      {
        "file": "app/api/__init__.py",
        "function": {
          "name": "register_blueprints",
          "line": 7,
          "args": 1,
          "docstring": "Register all blueprints with the Flask application.",
          "complexity": 9
        }
      }
    ],
    "health_check_0": [
      {
        "file": "app/__init__.py",
        "function": {
          "name": "health_check",
          "line": 42,
          "args": 0,
          "docstring": null,
          "complexity": 1
        }
      },
      {
        "file": "app/tasks.py",
        "function": {
          "name": "health_check",
          "line": 319,
          "args": 0,
          "docstring": "Periodic health check task\nMonitors system health and logs status",
          "complexity": 5
        }
      },
      {
        "file": "app/api/health.py",
        "function": {
          "name": "health_check",
          "line": 13,
          "args": 0,
          "docstring": "Comprehensive health check endpoint",
          "complexity": 8
        }
      },
      {
        "file": "app/api/signalwire_test.py",
        "function": {
          "name": "health_check",
          "line": 98,
          "args": 0,
          "docstring": "Simple health check for SignalWire integration",
          "complexity": 3
        }
      }
    ],
    "not_found_1": [
      {
        "file": "app/__init__.py",
        "function": {
          "name": "not_found",
          "line": 124,
          "args": 1,
          "docstring": null,
          "complexity": 1
        }
      },
      {
        "file": "app/api/signalwire.py",
        "function": {
          "name": "not_found",
          "line": 330,
          "args": 1,
          "docstring": null,
          "complexity": 1
        }
      }
    ],
    "internal_error_1": [
      {
        "file": "app/__init__.py",
        "function": {
          "name": "internal_error",
          "line": 128,
          "args": 1,
          "docstring": null,
          "complexity": 1
        }
      },
      {
        "file": "app/api/signalwire.py",
        "function": {
          "name": "internal_error",
          "line": 337,
          "args": 1,
          "docstring": null,
          "complexity": 1
        }
      }
    ],
    "init_app_1": [
      {
        "file": "app/cli.py",
        "function": {
          "name": "init_app",
          "line": 133,
          "args": 1,
          "docstring": "Register CLI commands with Flask app",
          "complexity": 1
        }
      },
      {
        "file": "app/utils/security.py",
        "function": {
          "name": "init_app",
          "line": 27,
          "args": 1,
          "docstring": "Initialize security module with Flask app context",
          "complexity": 10
        }
      }
    ],
    "is_within_business_hours_1": [
      {
        "file": "app/api/webhooks.py",
        "function": {
          "name": "is_within_business_hours",
          "line": 254,
          "args": 1,
          "docstring": "Check if current time is within user's business hours",
          "complexity": 6
        }
      },
      {
        "file": "app/services/message_handler.py",
        "function": {
          "name": "is_within_business_hours",
          "line": 79,
          "args": 1,
          "docstring": "Check if current time is within user's business hours\nUPDATED: Uses User model business_hours",
          "complexity": 8
        }
      }
    ],
    "test_webhook_0": [
      {
        "file": "app/api/webhooks.py",
        "function": {
          "name": "test_webhook",
          "line": 300,
          "args": 0,
          "docstring": "Test webhook endpoint for development",
          "complexity": 3
        }
      },
      {
        "file": "app/api/signalwire.py",
        "function": {
          "name": "test_webhook",
          "line": 126,
          "args": 0,
          "docstring": "Test webhook configuration for user's subaccount\nFrontend call: POST /api/signalwire/test-webhook",
          "complexity": 4
        }
      }
    ],
    "get_user_profile_0": [
      {
        "file": "app/api/profile.py",
        "function": {
          "name": "get_user_profile",
          "line": 12,
          "args": 0,
          "docstring": "Get current user's profile (single profile per user)",
          "complexity": 3
        }
      },
      {
        "file": "app/api/user_profile.py",
        "function": {
          "name": "get_user_profile",
          "line": 66,
          "args": 0,
          "docstring": "Get the current user's profile information",
          "complexity": 3
        }
      }
    ],
    "update_user_profile_0": [
      {
        "file": "app/api/profile.py",
        "function": {
          "name": "update_user_profile",
          "line": 33,
          "args": 0,
          "docstring": "Update current user's profile",
          "complexity": 25
        }
      },
      {
        "file": "app/api/user_profile.py",
        "function": {
          "name": "update_user_profile",
          "line": 86,
          "args": 0,
          "docstring": "Update the current user's profile information",
          "complexity": 7
        }
      }
    ],
    "get_ai_settings_0": [
      {
        "file": "app/api/profile.py",
        "function": {
          "name": "get_ai_settings",
          "line": 201,
          "args": 0,
          "docstring": "Get AI configuration",
          "complexity": 3
        }
      },
      {
        "file": "app/api/user_profile.py",
        "function": {
          "name": "get_ai_settings",
          "line": 125,
          "args": 0,
          "docstring": "Get the current user's AI settings",
          "complexity": 3
        }
      }
    ],
    "update_ai_settings_0": [
      {
        "file": "app/api/profile.py",
        "function": {
          "name": "update_ai_settings",
          "line": 223,
          "args": 0,
          "docstring": "Update AI configuration",
          "complexity": 13
        }
      },
      {
        "file": "app/api/user_profile.py",
        "function": {
          "name": "update_ai_settings",
          "line": 153,
          "args": 0,
          "docstring": "Update the current user's AI settings",
          "complexity": 7
        }
      }
    ],
    "get_usage_stats_0": [
      {
        "file": "app/api/profile.py",
        "function": {
          "name": "get_usage_stats",
          "line": 281,
          "args": 0,
          "docstring": "Get usage statistics for the user",
          "complexity": 3
        }
      },
      {
        "file": "app/api/signalwire.py",
        "function": {
          "name": "get_usage_stats",
          "line": 172,
          "args": 0,
          "docstring": "Get usage statistics for user's subaccount\nFrontend call: GET /api/signalwire/usage",
          "complexity": 5
        }
      }
    ],
    "update_business_hours_0": [
      {
        "file": "app/api/profile.py",
        "function": {
          "name": "update_business_hours",
          "line": 330,
          "args": 0,
          "docstring": "Update business hours configuration",
          "complexity": 10
        }
      },
      {
        "file": "app/api/user_profile.py",
        "function": {
          "name": "update_business_hours",
          "line": 298,
          "args": 0,
          "docstring": "Update the current user's business hours settings",
          "complexity": 7
        }
      }
    ],
    "get_current_subscription_0": [
      {
        "file": "app/api/billing.py",
        "function": {
          "name": "get_current_subscription",
          "line": 38,
          "args": 0,
          "docstring": "Get current user's subscription details",
          "complexity": 3
        }
      },
      {
        "file": "app/api/subscriptions.py",
        "function": {
          "name": "get_current_subscription",
          "line": 43,
          "args": 0,
          "docstring": "Get current user subscription with SignalWire details",
          "complexity": 3
        }
      }
    ],
    "create_subscription_0": [
      {
        "file": "app/api/billing.py",
        "function": {
          "name": "create_subscription",
          "line": 65,
          "args": 0,
          "docstring": "Create new subscription",
          "complexity": 5
        }
      },
      {
        "file": "app/api/subscriptions.py",
        "function": {
          "name": "create_subscription",
          "line": 12,
          "args": 0,
          "docstring": "Create new subscription with SignalWire provisioning",
          "complexity": 4
        }
      }
    ],
    "purchase_phone_number_0": [
      {
        "file": "app/api/signup.py",
        "function": {
          "name": "purchase_phone_number",
          "line": 75,
          "args": 0,
          "docstring": "Purchase phone number and automatically configure webhooks\n\nRequest body:\n{\n    \"phone_number\": \"+14165551234\",\n    \"friendly_name\": \"My Business Line\",\n    \"profile_name\": \"Business Profile\",\n    \"business_type\": \"Restaurant\",\n    \"timezone\": \"America/Toronto\"\n}",
          "complexity": 10
        }
      },
      {
        "file": "app/routes/onboarding.py",
        "function": {
          "name": "purchase_phone_number",
          "line": 121,
          "args": 0,
          "docstring": "Purchase selected phone number and complete SignalWire setup",
          "complexity": 13
        }
      }
    ],
    "test_signalwire_connection_0": [
      {
        "file": "app/api/signup.py",
        "function": {
          "name": "test_signalwire_connection",
          "line": 365,
          "args": 0,
          "docstring": "Test SignalWire API connectivity",
          "complexity": 3
        }
      },
      {
        "file": "app/routes/onboarding.py",
        "function": {
          "name": "test_signalwire_connection",
          "line": 353,
          "args": 0,
          "docstring": "Test SignalWire service connection (development only)",
          "complexity": 4
        }
      }
    ],
    "deactivate_account_0": [
      {
        "file": "app/api/auth.py",
        "function": {
          "name": "deactivate_account",
          "line": 382,
          "args": 0,
          "docstring": "Deactivate user account",
          "complexity": 6
        }
      },
      {
        "file": "app/api/user_profile.py",
        "function": {
          "name": "deactivate_account",
          "line": 473,
          "args": 0,
          "docstring": "Deactivate the current user's account",
          "complexity": 3
        }
      }
    ],
    "get_1": [
      {
        "file": "app/api/signalwire_test.py",
        "function": {
          "name": "get",
          "line": 18,
          "args": 1,
          "docstring": null,
          "complexity": 3
        }
      },
      {
        "file": "app/api/signalwire_test.py",
        "function": {
          "name": "get",
          "line": 56,
          "args": 1,
          "docstring": null,
          "complexity": 3
        }
      }
    ],
    "check_usage_limits_1": [
      {
        "file": "app/tasks/ai_tasks.py",
        "function": {
          "name": "check_usage_limits",
          "line": 337,
          "args": 1,
          "docstring": "Check if user is approaching usage limits and send notifications\n\nArgs:\n    user_id: Database user ID",
          "complexity": 11
        }
      },
      {
        "file": "app/utils/billing_helpers.py",
        "function": {
          "name": "check_usage_limits",
          "line": 212,
          "args": 1,
          "docstring": "Check if subscription is approaching or exceeding usage limits",
          "complexity": 4
        }
      }
    ],
    "__init___1": [
      {
        "file": "app/models/message.py",
        "function": {
          "name": "__init__",
          "line": 47,
          "args": 1,
          "docstring": null,
          "complexity": 2
        }
      },
      {
        "file": "app/models/client.py",
        "function": {
          "name": "__init__",
          "line": 37,
          "args": 1,
          "docstring": null,
          "complexity": 3
        }
      },
      {
        "file": "app/utils/llm_client.py",
        "function": {
          "name": "__init__",
          "line": 14,
          "args": 1,
          "docstring": null,
          "complexity": 3
        }
      },
      {
        "file": "app/utils/signalwire_client.py",
        "function": {
          "name": "__init__",
          "line": 19,
          "args": 1,
          "docstring": null,
          "complexity": 2
        }
      },
      {
        "file": "app/utils/signalwire_client.py",
        "function": {
          "name": "__init__",
          "line": 117,
          "args": 1,
          "docstring": null,
          "complexity": 2
        }
      },
      {
        "file": "app/services/signalwire_service.py",
        "function": {
          "name": "__init__",
          "line": 17,
          "args": 1,
          "docstring": null,
          "complexity": 3
        }
      },
      {
        "file": "app/services/signalwire_subaccount_service.py",
        "function": {
          "name": "__init__",
          "line": 17,
          "args": 1,
          "docstring": null,
          "complexity": 1
        }
      },
      {
        "file": "app/services/llm_service.py",
        "function": {
          "name": "__init__",
          "line": 13,
          "args": 1,
          "docstring": "Initialize LLM service with configuration.",
          "complexity": 1
        }
      },
      {
        "file": "app/services/ai_service.py",
        "function": {
          "name": "__init__",
          "line": 14,
          "args": 1,
          "docstring": null,
          "complexity": 1
        }
      },
      {
        "file": "app/services/sms_service.py",
        "function": {
          "name": "__init__",
          "line": 19,
          "args": 1,
          "docstring": null,
          "complexity": 1
        }
      }
    ],
    "to_dict_2": [
      {
        "file": "app/models/message.py",
        "function": {
          "name": "to_dict",
          "line": 82,
          "args": 2,
          "docstring": "Convert message to dictionary",
          "complexity": 2
        }
      },
      {
        "file": "app/models/user.py",
        "function": {
          "name": "to_dict",
          "line": 77,
          "args": 2,
          "docstring": null,
          "complexity": 6
        }
      },
      {
        "file": "app/models/billing.py",
        "function": {
          "name": "to_dict",
          "line": 179,
          "args": 2,
          "docstring": null,
          "complexity": 5
        }
      },
      {
        "file": "app/models/subscription.py",
        "function": {
          "name": "to_dict",
          "line": 111,
          "args": 2,
          "docstring": null,
          "complexity": 2
        }
      }
    ],
    "__repr___1": [
      {
        "file": "app/models/message.py",
        "function": {
          "name": "__repr__",
          "line": 123,
          "args": 1,
          "docstring": null,
          "complexity": 1
        }
      },
      {
        "file": "app/models/user.py",
        "function": {
          "name": "__repr__",
          "line": 144,
          "args": 1,
          "docstring": null,
          "complexity": 1
        }
      },
      {
        "file": "app/models/revoked_token.py",
        "function": {
          "name": "__repr__",
          "line": 13,
          "args": 1,
          "docstring": null,
          "complexity": 1
        }
      },
      {
        "file": "app/models/api_key.py",
        "function": {
          "name": "__repr__",
          "line": 22,
          "args": 1,
          "docstring": null,
          "complexity": 1
        }
      }
    ],
    "to_dict_1": [
      {
        "file": "app/models/utility.py",
        "function": {
          "name": "to_dict",
          "line": 28,
          "args": 1,
          "docstring": "Convert activity log to dictionary",
          "complexity": 1
        }
      },
      {
        "file": "app/models/utility.py",
        "function": {
          "name": "to_dict",
          "line": 74,
          "args": 1,
          "docstring": "Convert API key to dictionary (without actual key)",
          "complexity": 1
        }
      },
      {
        "file": "app/models/utility.py",
        "function": {
          "name": "to_dict",
          "line": 122,
          "args": 1,
          "docstring": "Convert notification setting to dictionary",
          "complexity": 1
        }
      },
      {
        "file": "app/models/utility.py",
        "function": {
          "name": "to_dict",
          "line": 168,
          "args": 1,
          "docstring": "Convert notification log to dictionary",
          "complexity": 1
        }
      },
      {
        "file": "app/models/utility.py",
        "function": {
          "name": "to_dict",
          "line": 205,
          "args": 1,
          "docstring": null,
          "complexity": 1
        }
      },
      {
        "file": "app/models/billing.py",
        "function": {
          "name": "to_dict",
          "line": 48,
          "args": 1,
          "docstring": null,
          "complexity": 1
        }
      },
      {
        "file": "app/models/billing.py",
        "function": {
          "name": "to_dict",
          "line": 110,
          "args": 1,
          "docstring": null,
          "complexity": 2
        }
      },
      {
        "file": "app/models/billing.py",
        "function": {
          "name": "to_dict",
          "line": 243,
          "args": 1,
          "docstring": null,
          "complexity": 2
        }
      },
      {
        "file": "app/models/usage.py",
        "function": {
          "name": "to_dict",
          "line": 52,
          "args": 1,
          "docstring": null,
          "complexity": 1
        }
      },
      {
        "file": "app/models/usage.py",
        "function": {
          "name": "to_dict",
          "line": 94,
          "args": 1,
          "docstring": null,
          "complexity": 1
        }
      },
      {
        "file": "app/models/api_key.py",
        "function": {
          "name": "to_dict",
          "line": 25,
          "args": 1,
          "docstring": null,
          "complexity": 1
        }
      },
      {
        "file": "app/models/subscription.py",
        "function": {
          "name": "to_dict",
          "line": 42,
          "args": 1,
          "docstring": null,
          "complexity": 1
        }
      },
      {
        "file": "app/models/signalwire_account.py",
        "function": {
          "name": "to_dict",
          "line": 34,
          "args": 1,
          "docstring": null,
          "complexity": 1
        }
      },
      {
        "file": "app/models/signalwire_account.py",
        "function": {
          "name": "to_dict",
          "line": 81,
          "args": 1,
          "docstring": null,
          "complexity": 1
        }
      },
      {
        "file": "app/models/banned_words.py",
        "function": {
          "name": "to_dict",
          "line": 17,
          "args": 1,
          "docstring": null,
          "complexity": 1
        }
      },
      {
        "file": "app/models/billing_settings.py",
        "function": {
          "name": "to_dict",
          "line": 75,
          "args": 1,
          "docstring": null,
          "complexity": 1
        }
      },
      {
        "file": "app/models/credit_transaction.py",
        "function": {
          "name": "to_dict",
          "line": 39,
          "args": 1,
          "docstring": null,
          "complexity": 1
        }
      }
    ],
    "validate_phone_number_1": [
      {
        "file": "app/utils/validators.py",
        "function": {
          "name": "validate_phone_number",
          "line": 75,
          "args": 1,
          "docstring": "Validate phone number format",
          "complexity": 1
        }
      },
      {
        "file": "app/utils/security.py",
        "function": {
          "name": "validate_phone_number",
          "line": 394,
          "args": 1,
          "docstring": "Validate a phone number format (E.164).\n\nArgs:\n    phone_number: Phone number to validate\n    \nReturns:\n    bool: True if valid, False otherwise",
          "complexity": 1
        }
      }
    ],
    "_get_fallback_response_2": [
      {
        "file": "app/utils/ollama_helpers.py",
        "function": {
          "name": "_get_fallback_response",
          "line": 100,
          "args": 2,
          "docstring": "Fallback response when LLM is unavailable",
          "complexity": 5
        }
      },
      {
        "file": "app/utils/llm_client.py",
        "function": {
          "name": "_get_fallback_response",
          "line": 101,
          "args": 2,
          "docstring": "Generate fallback response when LLM is unavailable",
          "complexity": 7
        }
      },
      {
        "file": "app/services/ai_service.py",
        "function": {
          "name": "_get_fallback_response",
          "line": 251,
          "args": 2,
          "docstring": "Get fallback response when AI fails",
          "complexity": 1
        }
      }
    ],
    "decorator_1": [
      {
        "file": "app/utils/cors_middleware.py",
        "function": {
          "name": "decorator",
          "line": 10,
          "args": 1,
          "docstring": null,
          "complexity": 2
        }
      },
      {
        "file": "app/utils/signalwire_client.py",
        "function": {
          "name": "decorator",
          "line": 89,
          "args": 1,
          "docstring": null,
          "complexity": 6
        }
      },
      {
        "file": "app/utils/auth_helpers.py",
        "function": {
          "name": "decorator",
          "line": 12,
          "args": 1,
          "docstring": null,
          "complexity": 3
        }
      },
      {
        "file": "app/utils/auth_helpers.py",
        "function": {
          "name": "decorator",
          "line": 34,
          "args": 1,
          "docstring": null,
          "complexity": 3
        }
      }
    ],
    "decorated_function_0": [
      {
        "file": "app/utils/cors_middleware.py",
        "function": {
          "name": "decorated_function",
          "line": 87,
          "args": 0,
          "docstring": null,
          "complexity": 2
        }
      },
      {
        "file": "app/utils/cors_middleware.py",
        "function": {
          "name": "decorated_function",
          "line": 12,
          "args": 0,
          "docstring": null,
          "complexity": 2
        }
      },
      {
        "file": "app/utils/auth_helpers.py",
        "function": {
          "name": "decorated_function",
          "line": 14,
          "args": 0,
          "docstring": null,
          "complexity": 3
        }
      },
      {
        "file": "app/utils/auth_helpers.py",
        "function": {
          "name": "decorated_function",
          "line": 36,
          "args": 0,
          "docstring": null,
          "complexity": 3
        }
      }
    ],
    "generate_response_3": [
      {
        "file": "app/utils/llm_client.py",
        "function": {
          "name": "generate_response",
          "line": 23,
          "args": 3,
          "docstring": "Generate AI response to incoming message",
          "complexity": 9
        }
      },
      {
        "file": "app/services/message_handler.py",
        "function": {
          "name": "generate_response",
          "line": 127,
          "args": 3,
          "docstring": "Generate appropriate response based on user settings\nUPDATED: Uses User model auto-reply settings and AI configuration",
          "complexity": 9
        }
      }
    ],
    "purchase_phone_number_3": [
      {
        "file": "app/utils/signalwire_client.py",
        "function": {
          "name": "purchase_phone_number",
          "line": 205,
          "args": 3,
          "docstring": "Purchase a phone number with webhook configuration",
          "complexity": 3
        }
      },
      {
        "file": "app/services/sms_service.py",
        "function": {
          "name": "purchase_phone_number",
          "line": 197,
          "args": 3,
          "docstring": "Purchase a phone number and configure webhooks",
          "complexity": 7
        }
      }
    ],
    "get_message_handler_0": [
      {
        "file": "app/services/__init__.py",
        "function": {
          "name": "get_message_handler",
          "line": 4,
          "args": 0,
          "docstring": "Lazy import message handler to avoid circular imports",
          "complexity": 1
        }
      },
      {
        "file": "app/services/__init__.py",
        "function": {
          "name": "get_message_handler",
          "line": 64,
          "args": 0,
          "docstring": "Get message handler functions.",
          "complexity": 1
        }
      },
      {
        "file": "app/services/__init__.py",
        "function": {
          "name": "get_message_handler",
          "line": 94,
          "args": 0,
          "docstring": "Get message handler functions.",
          "complexity": 1
        }
      },
      {
        "file": "app/services/__init__.py",
        "function": {
          "name": "get_message_handler",
          "line": 123,
          "args": 0,
          "docstring": "Get message handler functions.",
          "complexity": 1
        }
      }
    ],
    "get_ai_service_0": [
      {
        "file": "app/services/__init__.py",
        "function": {
          "name": "get_ai_service",
          "line": 23,
          "args": 0,
          "docstring": "Lazy import AI service to avoid circular imports",
          "complexity": 1
        }
      },
      {
        "file": "app/services/__init__.py",
        "function": {
          "name": "get_ai_service",
          "line": 69,
          "args": 0,
          "docstring": "Get AI service functions.",
          "complexity": 1
        }
      },
      {
        "file": "app/services/__init__.py",
        "function": {
          "name": "get_ai_service",
          "line": 99,
          "args": 0,
          "docstring": "Get AI service functions.",
          "complexity": 1
        }
      },
      {
        "file": "app/services/__init__.py",
        "function": {
          "name": "get_ai_service",
          "line": 128,
          "args": 0,
          "docstring": "Get AI service functions.",
          "complexity": 1
        }
      }
    ],
    "get_billing_service_0": [
      {
        "file": "app/services/__init__.py",
        "function": {
          "name": "get_billing_service",
          "line": 36,
          "args": 0,
          "docstring": "Lazy import billing service to avoid circular imports",
          "complexity": 1
        }
      },
      {
        "file": "app/services/__init__.py",
        "function": {
          "name": "get_billing_service",
          "line": 74,
          "args": 0,
          "docstring": "Get billing service functions.",
          "complexity": 1
        }
      },
      {
        "file": "app/services/__init__.py",
        "function": {
          "name": "get_billing_service",
          "line": 104,
          "args": 0,
          "docstring": "Get billing service functions.",
          "complexity": 1
        }
      },
      {
        "file": "app/services/__init__.py",
        "function": {
          "name": "get_billing_service",
          "line": 133,
          "args": 0,
          "docstring": "Get billing service functions.",
          "complexity": 1
        }
      }
    ],
    "get_sms_service_0": [
      {
        "file": "app/services/__init__.py",
        "function": {
          "name": "get_sms_service",
          "line": 79,
          "args": 0,
          "docstring": "Lazy import SMS service to avoid circular imports",
          "complexity": 1
        }
      },
      {
        "file": "app/services/__init__.py",
        "function": {
          "name": "get_sms_service",
          "line": 108,
          "args": 0,
          "docstring": "Lazy import SMS service to avoid circular imports",
          "complexity": 1
        }
      },
      {
        "file": "app/services/__init__.py",
        "function": {
          "name": "get_sms_service",
          "line": 89,
          "args": 0,
          "docstring": "Get SMS service instance.",
          "complexity": 1
        }
      },
      {
        "file": "app/services/__init__.py",
        "function": {
          "name": "get_sms_service",
          "line": 118,
          "args": 0,
          "docstring": "Get SMS service instance.",
          "complexity": 1
        }
      }
    ],
    "generate_response_5": [
      {
        "file": "app/services/llm_service.py",
        "function": {
          "name": "generate_response",
          "line": 20,
          "args": 5,
          "docstring": null,
          "complexity": 5
        }
      },
      {
        "file": "app/services/llm_service.py",
        "function": {
          "name": "generate_response",
          "line": 205,
          "args": 5,
          "docstring": null,
          "complexity": 3
        }
      }
    ],
    "_format_llm_request_2": [
      {
        "file": "app/services/llm_service.py",
        "function": {
          "name": "_format_llm_request",
          "line": 120,
          "args": 2,
          "docstring": "Format the request for your specific LLM server.",
          "complexity": 1
        }
      },
      {
        "file": "app/services/llm_service.py",
        "function": {
          "name": "_format_llm_request",
          "line": 193,
          "args": 2,
          "docstring": null,
          "complexity": 1
        }
      }
    ]
  },
  "unused_imports": {
    "app/__init__.py": [
      "Line 4: flask_jwt_extended.JWTManager",
      "Line 93: app.models.User",
      "Line 93: app.models.Message",
      "Line 93: app.models.Client",
      "Line 93: app.models.Subscription",
      "Line 93: app.models.SubscriptionPlan",
      "Line 93: app.models.Invoice",
      "Line 93: app.models.InvoiceItem",
      "Line 93: app.models.PaymentMethod",
      "Line 93: app.models.Payment"
    ],
    "app/config.py": [
      "Line 12: typing.List"
    ],
    "app/tasks.py": [
      "Line 5: os.",
      "Line 9: celery.current_task"
    ],
    "app/api/webhooks.py": [
      "Line 2: flask.current_app"
    ],
    "app/api/profile.py": [
      "Line 5: datetime.datetime"
    ],
    "app/api/billing.py": [
      "Line 6: sqlalchemy.func",
      "Line 6: sqlalchemy.or_",
      "Line 6: sqlalchemy.and_"
    ],
    "app/api/fallback_webhooks.py": [
      "Line 6: app.services.sms_service.escape_xml"
    ],
    "app/api/signalwire_subaccounts.py": [
      "Line 4: asyncio."
    ],
    "app/api/messages.py": [
      "Line 8: sqlalchemy.func",
      "Line 8: sqlalchemy.and_"
    ],
    "app/api/clients.py": [
      "Line 3: app.models.user.User",
      "Line 8: sqlalchemy.func",
      "Line 8: sqlalchemy.and_"
    ],
    "app/api/signup.py": [
      "Line 8: logging."
    ],
    "app/api/auth.py": [
      "Line 12: decimal.Decimal"
    ],
    "app/api/subscriptions.py": [
      "Line 5: app.models.signalwire_account.SignalWireAccount",
      "Line 6: app.extensions.db"
    ],
    "app/tasks/ai_tasks.py": [
      "Line 348: datetime.timedelta"
    ],
    "app/tasks/scheduler.py": [
      "Line 2: flask.current_app"
    ],
    "app/admin/billing_admin.py": [
      "Line 9: typing.Optional",
      "Line 12: sqlalchemy.asc",
      "Line 15: app.models.subscription.SubscriptionPlan",
      "Line 21: app.services.invoice_generator.InvoiceGenerator"
    ],
    "app/models/message.py": [
      "Line 2: flask_sqlalchemy.SQLAlchemy"
    ],
    "app/models/subscription.py": [
      "Line 4: json."
    ],
    "app/utils/__init__.py": [
      "Line 43: security.*"
    ],
    "app/utils/validators.py": [
      "Line 2: typing.List",
      "Line 2: typing.Union",
      "Line 4: datetime.datetime"
    ],
    "app/utils/normalize_phone.py": [
      "Line 3: phonenumbers.carrier",
      "Line 4: phonenumbers.phonenumberutil.number_type"
    ],
    "app/utils/ollama_helpers.py": [
      "Line 6: typing.List",
      "Line 7: flask.current_app"
    ],
    "app/utils/response_helpers.py": [
      "Line 2: typing.Optional"
    ],
    "app/utils/security.py": [
      "Line 21: werkzeug.local.LocalProxy"
    ],
    "app/utils/llm_client.py": [
      "Line 7: logging.",
      "Line 8: typing.Optional"
    ],
    "app/utils/signalwire_client.py": [
      "Line 6: hmac.",
      "Line 7: hashlib.",
      "Line 10: typing.Optional",
      "Line 10: typing.List"
    ],
    "app/utils/subscription_helpers.py": [
      "Line 3: app.models.subscription.SubscriptionPlan"
    ],
    "app/utils/auth_helpers.py": [
      "Line 2: flask.request"
    ],
    "app/utils/billing_helpers.py": [
      "Line 12: app.extensions.db"
    ],
    "app/services/stripe_checkout_service.py": [
      "Line 3: flask.url_for",
      "Line 4: datetime.timedelta"
    ],
    "app/services/payment_processor.py": [
      "Line 9: datetime.timedelta",
      "Line 15: app.models.invoice.Invoice",
      "Line 16: app.utils.billing_helpers.BillingHelpers"
    ],
    "app/services/queue_service.py": [
      "Line 5: flask.current_app"
    ],
    "app/services/signalwire_service.py": [
      "Line 5: typing.Tuple",
      "Line 6: signalwire.rest.Client",
      "Line 7: flask.current_app"
    ],
    "app/services/notification_service.py": [
      "Line 9: typing.List",
      "Line 9: typing.Optional",
      "Line 11: flask_mail.Message",
      "Line 13: app.extensions.db"
    ],
    "app/services/signalwire_subaccount_service.py": [
      "Line 1: asyncio.",
      "Line 8: asyncpg."
    ],
    "app/services/billing_service.py": [
      "Line 3: datetime.timedelta",
      "Line 17: app.models.billing.Invoice"
    ],
    "app/services/invoice_generator.py": [
      "Line 10: typing.Optional",
      "Line 15: reportlab.lib.pagesizes.A4",
      "Line 18: reportlab.platypus.Image",
      "Line 20: reportlab.lib.enums.TA_LEFT",
      "Line 20: reportlab.lib.enums.TA_RIGHT",
      "Line 23: flask_mail.Message",
      "Line 24: flask.render_template"
    ],
    "app/services/usage_tracker.py": [
      "Line 6: datetime.timedelta",
      "Line 8: sqlalchemy.and_",
      "Line 8: sqlalchemy.or_",
      "Line 12: app.models.message.Message",
      "Line 565: flask.jsonify"
    ],
    "app/services/ai_service.py": [
      "Line 6: typing.Optional",
      "Line 6: typing.Tuple",
      "Line 7: datetime.timedelta"
    ],
    "app/services/sms_service.py": [
      "Line 10: typing.Optional",
      "Line 11: flask.current_app",
      "Line 12: datetime.datetime",
      "Line 33: signalwire.rest.Client"
    ],
    "app/services/subscription_service.py": [
      "Line 2: app.models.signalwire_account.SignalWireAccount",
      "Line 2: app.models.signalwire_account.SignalWirePhoneNumber",
      "Line 4: app.extensions.db",
      "Line 6: datetime.datetime",
      "Line 6: datetime.timedelta",
      "Line 7: secrets.",
      "Line 11: app.services.sms_service.SMSService",
      "Line 14: app.services.sms_service.get_signalwire_client",
      "Line 14: app.services.sms_service.send_sms",
      "Line 14: app.services.sms_service.get_signalwire_phone_numbers",
      "Line 14: app.services.sms_service.get_available_phone_numbers",
      "Line 14: app.services.sms_service.purchase_phone_number",
      "Line 14: app.services.sms_service.configure_number_webhook"
    ]
  },
  "recommendations": [
    "\ud83d\udd04 Found 36 duplicate function signatures - consider consolidating",
    "\ud83d\udce6 Found unused imports in 41 files - run cleanup",
    "\ud83d\udea8 14 functions with high complexity - consider refactoring",
    "\u26a0\ufe0f  6 files with many issues - review and fix"
  ]
}