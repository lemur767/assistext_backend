#!/bin/bash
# Quick Fix for Nginx SSL Certificate Error
# This removes SSL config and sets up HTTP-only access

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}🔧 Fixing Nginx SSL Certificate Error${NC}"
echo "====================================="

# Check if running as root
if [[ $EUID -ne 0 ]]; then
   echo -e "${RED}❌ This script must be run as root${NC}"
   echo "Run: sudo $0"
   exit 1
fi

echo -e "\n${BLUE}1. Stopping Nginx${NC}"
echo "================="
systemctl stop nginx

echo -e "\n${BLUE}2. Backing Up Current Configuration${NC}"
echo "=================================="

# Create backup directory
mkdir -p /etc/nginx/backups/$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="/etc/nginx/backups/$(date +%Y%m%d_%H%M%S)"

# Backup current configurations
if [[ -f /etc/nginx/sites-available/backend.assitext.ca ]]; then
    cp /etc/nginx/sites-available/backend.assitext.ca $BACKUP_DIR/
    echo -e "✅ Backed up backend.assitext.ca config"
fi

if [[ -f /etc/nginx/sites-available/backend.assistext.ca ]]; then
    cp /etc/nginx/sites-available/backend.assistext.ca $BACKUP_DIR/
    echo -e "✅ Backed up backend.assistext.ca config"
fi

echo -e "📁 Backups saved to: $BACKUP_DIR"

echo -e "\n${BLUE}3. Removing Broken SSL Configurations${NC}"
echo "===================================="

# Remove any existing configurations
rm -f /etc/nginx/sites-enabled/backend.assitext.ca
rm -f /etc/nginx/sites-enabled/backend.assistext.ca
rm -f /etc/nginx/sites-available/backend.assistext.ca

echo -e "✅ Removed broken configurations"

echo -e "\n${BLUE}4. Creating HTTP-Only Configuration${NC}"
echo "=================================="

# Create new HTTP-only configuration
cat > /etc/nginx/sites-available/backend.assitext.ca << 'EOF'
# HTTP-Only Configuration for backend.assitext.ca
# Generated by AssisText fix script

server {
    listen 80;
    server_name backend.assitext.ca;
    
    # Security headers
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options DENY;
    add_header X-XSS-Protection "1; mode=block";
    
    # CORS headers for API
    add_header 'Access-Control-Allow-Origin' 'https://assitext.ca' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With, Accept, Origin' always;
    add_header 'Access-Control-Allow-Credentials' 'true' always;
    
    # Handle preflight OPTIONS requests
    location / {
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' 'https://assitext.ca' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With, Accept, Origin' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        
        # Proxy to Flask backend
        proxy_pass http://127.0.0.1:5000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
    
    # API endpoints
    location /api/ {
        add_header 'Access-Control-Allow-Origin' 'https://assitext.ca' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With, Accept, Origin' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        
        proxy_pass http://127.0.0.1:5000/api/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Health check
    location /health {
        add_header 'Access-Control-Allow-Origin' '*' always;
        
        proxy_pass http://127.0.0.1:5000/health;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Logging
    access_log /var/log/nginx/backend.assitext.ca.access.log;
    error_log /var/log/nginx/backend.assitext.ca.error.log;
}
EOF

echo -e "✅ Created HTTP-only configuration"

echo -e "\n${BLUE}5. Enabling New Configuration${NC}"
echo "============================="

# Enable the new configuration
ln -s /etc/nginx/sites-available/backend.assitext.ca /etc/nginx/sites-enabled/

echo -e "✅ Configuration enabled"

echo -e "\n${BLUE}6. Testing Nginx Configuration${NC}"
echo "=============================="

if nginx -t; then
    echo -e "✅ ${GREEN}Nginx configuration is valid${NC}"
else
    echo -e "❌ ${RED}Nginx configuration has errors${NC}"
    echo -e "Showing configuration test output:"
    nginx -t
    exit 1
fi

echo -e "\n${BLUE}7. Starting Nginx${NC}"
echo "================="

systemctl start nginx
systemctl enable nginx

# Wait a moment
sleep 2

if systemctl is-active --quiet nginx; then
    echo -e "✅ ${GREEN}Nginx is running${NC}"
else
    echo -e "❌ ${RED}Nginx failed to start${NC}"
    echo -e "Checking status..."
    systemctl status nginx
    exit 1
fi

echo -e "\n${BLUE}8. Testing Backend Connection${NC}"
echo "============================="

# Test local backend first
echo -e "🔍 Testing local backend (127.0.0.1:5000)..."
if curl -s http://127.0.0.1:5000/health >/dev/null 2>&1; then
    echo -e "✅ Local backend responding"
    
    # Test through nginx
    echo -e "🔍 Testing through nginx (backend.assitext.ca)..."
    sleep 2
    
    if curl -s http://backend.assitext.ca/health >/dev/null 2>&1; then
        echo -e "✅ ${GREEN}Nginx proxy working!${NC}"
        
        # Show the response
        echo -e "\n📄 Health check response:"
        curl -s http://backend.assitext.ca/health | python3 -m json.tool
        
    else
        echo -e "⚠️ ${YELLOW}Nginx proxy not working yet${NC}"
        echo -e "This might be due to DNS. Testing with localhost..."
        
        # Test with Host header
        if curl -s -H "Host: backend.assitext.ca" http://localhost/health >/dev/null 2>&1; then
            echo -e "✅ Proxy works with localhost"
            echo -e "🌐 DNS issue - backend.assitext.ca doesn't point to this server"
        else
            echo -e "❌ Proxy configuration issue"
        fi
    fi
    
else
    echo -e "❌ ${RED}Local backend not responding${NC}"
    echo -e "Please check if assistext-backend service is running:"
    echo -e "sudo systemctl status assistext-backend"
fi

echo -e "\n${BLUE}9. Testing Auth Endpoint${NC}"
echo "======================="

if curl -s http://backend.assitext.ca/api/auth/login >/dev/null 2>&1; then
    echo -e "✅ Auth endpoint accessible"
    
    # Test with invalid data (should return 400)
    AUTH_RESPONSE=$(curl -s -X POST http://backend.assitext.ca/api/auth/login \
        -H "Content-Type: application/json" \
        -d '{}')
    
    echo -e "📄 Auth endpoint response (empty body):"
    echo "$AUTH_RESPONSE" | python3 -m json.tool 2>/dev/null || echo "$AUTH_RESPONSE"
    
else
    echo -e "❌ Auth endpoint not accessible"
fi

echo -e "\n${GREEN}🎉 Fix Complete!${NC}"
echo "================="

echo -e "✅ Nginx is running without SSL errors"
echo -e "✅ HTTP access configured for backend.assitext.ca"

if curl -s http://backend.assitext.ca/health | grep -q "healthy"; then
    echo -e "✅ ${GREEN}Backend is accessible via nginx proxy${NC}"
    echo -e "\n🌐 Your backend URL: ${BLUE}http://backend.assitext.ca${NC}"
    echo -e "\n📱 ${GREEN}Your frontend should now be able to connect!${NC}"
    
    echo -e "\n🧪 Test your login:"
    echo -e "1. Go to https://assitext.ca/login"
    echo -e "2. Try logging in with username: lemur"
    echo -e "3. Check browser dev tools - should see successful connection"
    
else
    echo -e "⚠️ ${YELLOW}Backend proxy setup but connection issues remain${NC}"
    echo -e "\n🔍 Troubleshooting:"
    echo -e "1. Check backend service: sudo systemctl status assistext-backend"
    echo -e "2. Check nginx logs: sudo tail -f /var/log/nginx/backend.assitext.ca.error.log"
    echo -e "3. Test local backend: curl http://127.0.0.1:5000/health"
fi

echo -e "\n🔒 ${YELLOW}To add SSL later (optional):${NC}"
echo -e "1. Ensure DNS points backend.assitext.ca to this server"
echo -e "2. Run: sudo certbot --nginx -d backend.assitext.ca"
echo -e "3. Certbot will automatically update the nginx config"

echo -e "\n✅ ${GREEN}Ready to test your login!${NC}"
